;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.10 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 31.03.2017
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 1,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;flash unsigned char solder_img[128] = { /* 0X00,0X01,0X20,0X00,0X20,0X00, */
;0X00,0X00,0X00,0X01,0X00,0X00,0X00,0X0A,0X00,0X00,0X00,0X1C,0X00,0X00,0X00,0X3E,
;0X00,0X00,0X00,0X7C,0X00,0X00,0X00,0XF8,0X00,0X00,0X01,0XF0,0X00,0X00,0X03,0XE0,
;0X00,0X00,0X07,0XC0,0X00,0X00,0X0F,0X80,0X00,0X00,0X7F,0X00,0X00,0X00,0XBE,0X00,
;0X00,0X01,0X7C,0X00,0X00,0X01,0XFC,0X00,0X00,0X01,0XF4,0X00,0X00,0X02,0XE8,0X00,
;0X00,0X04,0X70,0X00,0X00,0X08,0X80,0X00,0X00,0X11,0X00,0X00,0X00,0X22,0X00,0X00,
;0X00,0X44,0X00,0X00,0X00,0X88,0X00,0X00,0X01,0X10,0X00,0X00,0X02,0X20,0X00,0X00,
;0X04,0X40,0X00,0X00,0X08,0X80,0X00,0X00,0X11,0X00,0X00,0X00,0X0A,0X00,0X00,0X00,
;0X14,0X00,0X00,0X00,0X20,0X00,0X00,0X00,0X40,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
;};
;flash unsigned char fan_img[128] = { /* 0X00,0X01,0X20,0X00,0X20,0X00, */
;0X00,0X03,0XF0,0X00,0X00,0X07,0XFC,0X00,0X00,0X0F,0XFE,0X00,0X00,0X1F,0XFE,0X00,
;0X00,0X1F,0XFE,0X00,0X00,0X1F,0XFE,0X00,0X00,0X1F,0XFC,0X00,0X00,0X1F,0XF8,0X00,
;0X00,0X1F,0XF0,0X00,0X3C,0X0F,0XE0,0X00,0X7E,0X0F,0XE0,0X00,0X7F,0X07,0XC1,0XF8,
;0XFF,0X84,0X27,0XFC,0XFF,0XE8,0X1F,0XFE,0XFF,0XF1,0X8F,0XFF,0XFF,0XF3,0XCF,0XFF,
;0XFF,0XF3,0XCF,0XFF,0XFF,0XF1,0X8F,0XFF,0X7F,0XF8,0X17,0XFF,0X3F,0XE4,0X21,0XFF,
;0X1F,0X83,0XE0,0XFE,0X00,0X07,0XF0,0X7E,0X00,0X07,0XF0,0X3C,0X00,0X0F,0XF8,0X00,
;0X00,0X1F,0XF8,0X00,0X00,0X3F,0XF8,0X00,0X00,0X7F,0XF8,0X00,0X00,0X7F,0XF8,0X00,
;0X00,0X7F,0XF8,0X00,0X00,0X7F,0XF0,0X00,0X00,0X3F,0XE0,0X00,0X00,0X0F,0XC0,0X00,
;};
;
;
;flash unsigned char hotair_img[128] = { /* 0X00,0X01,0X20,0X00,0X20,0X00, */
;0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
;0X07,0XF0,0X00,0X00,0X1F,0XFF,0XF0,0X00,0X1F,0XFF,0XFE,0X00,0X38,0X3F,0XFE,0XFE,
;0X38,0X3F,0XFE,0X00,0X78,0X3F,0XFE,0XFE,0X78,0X3F,0XFE,0X00,0X38,0X3F,0XFE,0XFE,
;0X38,0X3F,0XFE,0X00,0X1F,0XFF,0XF8,0X00,0X1F,0XFF,0XC0,0X00,0X07,0XFE,0X00,0X00,
;0X07,0XF0,0X00,0X00,0X07,0XF0,0X00,0X00,0X07,0XF0,0X00,0X00,0X07,0XF0,0X00,0X00,
;0X07,0XF0,0X00,0X00,0X07,0XF0,0X00,0X00,0X07,0XF0,0X00,0X00,0X07,0XF0,0X00,0X00,
;0X07,0XF0,0X00,0X00,0X07,0XF0,0X00,0X00,0X07,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,
;0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X00,
;};
;
;#define solder_TC 6
;#define air_TC 7
;#define solder_RR 0
;#define air_RR 2
;#define fan_RR 1
;#define solder_but PINC.3
;#define solde_led  PORTC.4
;#define air_ger  PINC.5
;
;#define air_heater  PORTB.0
;
;#define sold_power OCR1BL
;#define fan_power OCR1AL
;
;
;#define K_P     2
;#define K_I     0.02
;#define K_D     0.05
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <stdlib.h>
;#include <LPH9157-2.h>
;//********************Библиотека дисплея Siemens C75, МЕ75*******************
;//           	  	Зеленый текстолит LPH9157-2
;//             		     132х176 пикселей
;//                   		  v 1.1
;//                  Copyright (c) Кизим Игорь aka Igoryosha
;//			  Website : lobotryasy.net
;//***************************************************************************
;
;#include <delay.h>
;
;//*************************************************************
;//Команда/Данные
;#define CMD 0
;#define DAT 1
;char RS_old;
;//*************************************************************
;
;/* С помощью этой таблицы пиксели выводить сверху-вниз, слево-направо.
;Шрифт - 5х8 пикселей, разложен по кодам ASCII.
;Символы с кодами 0-31 и 128 - 191 отсутствуют за ненадобностью! */
;
;flash unsigned char font_5x8[][5]  = {
;0x00, 0x00, 0x00, 0x00, 0x00,// (space)  32
;0x00, 0x00, 0x5F, 0x00, 0x00,// !        33
;0x00, 0x07, 0x00, 0x07, 0x00,// "        34
;0x14, 0x7F, 0x14, 0x7F, 0x14,// #        35
;0x24, 0x2A, 0x7F, 0x2A, 0x12,// $        36
;0x23, 0x13, 0x08, 0x64, 0x62,// %        37
;0x36, 0x49, 0x55, 0x22, 0x50,// &        38
;0x00, 0x05, 0x03, 0x00, 0x00,// '        39
;0x00, 0x1C, 0x22, 0x41, 0x00,// (        40
;0x00, 0x41, 0x22, 0x1C, 0x00,// )        41
;0x08, 0x2A, 0x1C, 0x2A, 0x08,// *        42
;0x08, 0x08, 0x3E, 0x08, 0x08,// +        43
;0x00, 0x50, 0x30, 0x00, 0x00,// ,        44
;0x08, 0x08, 0x08, 0x08, 0x08,// -        45
;0x00, 0x30, 0x30, 0x00, 0x00,// .        46
;0x20, 0x10, 0x08, 0x04, 0x02,// /        47
;0x3E, 0x51, 0x49, 0x45, 0x3E,// 0        48
;0x00, 0x42, 0x7F, 0x40, 0x00,// 1        49
;0x42, 0x61, 0x51, 0x49, 0x46,// 2        50
;0x21, 0x41, 0x45, 0x4B, 0x31,// 3        51
;0x18, 0x14, 0x12, 0x7F, 0x10,// 4        52
;0x27, 0x45, 0x45, 0x45, 0x39,// 5        53
;0x3C, 0x4A, 0x49, 0x49, 0x30,// 6        54
;0x01, 0x71, 0x09, 0x05, 0x03,// 7        55
;0x36, 0x49, 0x49, 0x49, 0x36,// 8        56
;0x06, 0x49, 0x49, 0x29, 0x1E,// 9        57
;0x00, 0x36, 0x36, 0x00, 0x00,// :        58
;0x00, 0x56, 0x36, 0x00, 0x00,// ;        59
;0x00, 0x08, 0x14, 0x22, 0x41,// <        60
;0x14, 0x14, 0x14, 0x14, 0x14,// =        61
;0x41, 0x22, 0x14, 0x08, 0x00,// >        62
;0x02, 0x01, 0x51, 0x09, 0x06,// ?        63
;0x32, 0x49, 0x79, 0x41, 0x3E,// @        64
;0x7E, 0x11, 0x11, 0x11, 0x7E,// A        65
;0x7F, 0x49, 0x49, 0x49, 0x36,// B        66
;0x3E, 0x41, 0x41, 0x41, 0x22,// C        67
;0x7F, 0x41, 0x41, 0x22, 0x1C,// D        68
;0x7F, 0x49, 0x49, 0x49, 0x41,// E        69
;0x7F, 0x09, 0x09, 0x01, 0x01,// F        70
;0x3E, 0x41, 0x41, 0x51, 0x32,// G        71
;0x7F, 0x08, 0x08, 0x08, 0x7F,// H        72
;0x00, 0x41, 0x7F, 0x41, 0x00,// I        73
;0x20, 0x40, 0x41, 0x3F, 0x01,// J        74
;0x7F, 0x08, 0x14, 0x22, 0x41,// K        75
;0x7F, 0x40, 0x40, 0x40, 0x40,// L        76
;0x7F, 0x02, 0x04, 0x02, 0x7F,// M        77
;0x7F, 0x04, 0x08, 0x10, 0x7F,// N        78
;0x3E, 0x41, 0x41, 0x41, 0x3E,// O        79
;0x7F, 0x09, 0x09, 0x09, 0x06,// P        80
;0x3E, 0x41, 0x51, 0x21, 0x5E,// Q        81
;0x7F, 0x09, 0x19, 0x29, 0x46,// R        82
;0x46, 0x49, 0x49, 0x49, 0x31,// S        83
;0x01, 0x01, 0x7F, 0x01, 0x01,// T        84
;0x3F, 0x40, 0x40, 0x40, 0x3F,// U        85
;0x1F, 0x20, 0x40, 0x20, 0x1F,// V        86
;0x7F, 0x20, 0x18, 0x20, 0x7F,// W        87
;0x63, 0x14, 0x08, 0x14, 0x63,// X        88
;0x03, 0x04, 0x78, 0x04, 0x03,// Y        89
;0x61, 0x51, 0x49, 0x45, 0x43,// Z        90
;0x00, 0x00, 0x7F, 0x41, 0x41,// [        91
;0x02, 0x04, 0x08, 0x10, 0x20,// "\"      92
;0x41, 0x41, 0x7F, 0x00, 0x00,// ]        93
;0x04, 0x02, 0x01, 0x02, 0x04,// ^        94
;0x40, 0x40, 0x40, 0x40, 0x40,// _        95
;0x00, 0x01, 0x02, 0x04, 0x00,// `        96
;0x20, 0x54, 0x54, 0x54, 0x78,// a        97
;0x7F, 0x48, 0x44, 0x44, 0x38,// b        98
;0x38, 0x44, 0x44, 0x44, 0x20,// c        99
;0x38, 0x44, 0x44, 0x48, 0x7F,// d        100
;0x38, 0x54, 0x54, 0x54, 0x18,// e        101
;0x08, 0x7E, 0x09, 0x01, 0x02,// f        102
;0x08, 0x14, 0x54, 0x54, 0x3C,// g        103
;0x7F, 0x08, 0x04, 0x04, 0x78,// h        104
;0x00, 0x44, 0x7D, 0x40, 0x00,// i        105
;0x20, 0x40, 0x44, 0x3D, 0x00,// j        106
;0x00, 0x7F, 0x10, 0x28, 0x44,// k        107
;0x00, 0x41, 0x7F, 0x40, 0x00,// l        108
;0x7C, 0x04, 0x18, 0x04, 0x78,// m        109
;0x7C, 0x08, 0x04, 0x04, 0x78,// n        110
;0x38, 0x44, 0x44, 0x44, 0x38,// o        111
;0x7C, 0x14, 0x14, 0x14, 0x08,// p        112
;0x08, 0x14, 0x14, 0x18, 0x7C,// q        113
;0x7C, 0x08, 0x04, 0x04, 0x08,// r        114
;0x48, 0x54, 0x54, 0x54, 0x20,// s        115
;0x04, 0x3F, 0x44, 0x40, 0x20,// t        116
;0x3C, 0x40, 0x40, 0x20, 0x7C,// u        117
;0x1C, 0x20, 0x40, 0x20, 0x1C,// v        118
;0x3C, 0x40, 0x30, 0x40, 0x3C,// w        119
;0x44, 0x28, 0x10, 0x28, 0x44,// x        120
;0x0C, 0x50, 0x50, 0x50, 0x3C,// y        121
;0x44, 0x64, 0x54, 0x4C, 0x44,// z        122
;0x00, 0x08, 0x36, 0x41, 0x00,// {        123
;0x00, 0x00, 0x7F, 0x00, 0x00,// |        124
;0x00, 0x41, 0x36, 0x08, 0x00,// }        125
;0x00, 0x00, 0x00, 0x00, 0x00,// (space)  126
;0x00, 0x00, 0x00, 0x00, 0x00,// (space)  127
;0x7E, 0x11, 0x11, 0x11, 0x7E,// A        192
;0x7F, 0x45, 0x45, 0x45, 0x39,// Б        193
;0x7F, 0x49, 0x49, 0x49, 0x36,// B        194
;0x7F, 0x01, 0x01, 0x01, 0x03,// Г        195
;0xC0, 0x7E, 0x41, 0x7F, 0xC0,// Д        196
;0x7F, 0x49, 0x49, 0x49, 0x41,// E        197
;119,8,127,8,119,             // Ж        198
;34,73,73,73,54,              // З        199
;127,32,16,8,127,             // И        200
;127,32,19,8,127,             // Й        201
;0x7F, 0x08, 0x14, 0x22, 0x41,// K        202
;64,62,1,1,127,               // Л        203
;0x7F, 0x02, 0x04, 0x02, 0x7F,// M        204
;0x7F, 0x08, 0x08, 0x08, 0x7F,// H        205
;0x3E, 0x41, 0x41, 0x41, 0x3E,// O        206
;127,1,1,1,127,               // П        207
;0x7F, 0x09, 0x09, 0x09, 0x06,// P        208
;0x3E, 0x41, 0x41, 0x41, 0x22,// C        209
;0x01, 0x01, 0x7F, 0x01, 0x01,// T        210
;39,72,72,72,63,              // У        211
;30,33,127,33,30,             // Ф        212
;0x63, 0x14, 0x08, 0x14, 0x63,// X        213
;127,64,64,127,192,           // Ц        214
;15,16,16,16,127,             // Ч        215
;127,64,124,64,127,           // Ш        216
;127,64,124,64,255,           // Щ        217
;1,127,72,72,48,              // Ъ        218
;127,72,48,0,127,             // Ы        219
;127,72,72,72,48,             // Ь        220
;34,73,73,73,62,              // Э        221
;127,8,62,65,62,              // Ю        222
;118,9,9,9,127,               // Я        223
;0x20, 0x54, 0x54, 0x54, 0x78,// a        224
;124, 84, 84, 84, 36,         // б        225
;124, 84, 84, 84, 40,         // в        226
;124, 4, 4, 4, 12,            // г        227
;192, 120, 68, 124, 192,      // д        228
;0x38, 0x54, 0x54, 0x54, 0x18,// e        229
;108, 16, 124, 16, 108,       // ж        230
;40, 68, 84, 84, 40,          // з        231
;124, 32, 16, 8, 124,         // и        232
;124, 33, 18, 8, 124,         // й        233
;124, 16, 16, 40, 68,         // к        234
;64, 56, 4, 4, 124,           // л        235
;124, 8, 16, 8, 124,          // м        236
;124, 16, 16, 16, 124,        // н        237
;0x38, 0x44, 0x44, 0x44, 0x38,// o        238
;124, 4, 4, 4, 124,           // п        239
;0x7C, 0x14, 0x14, 0x14, 0x08,// p        240
;0x38, 0x44, 0x44, 0x44, 0x20,// c        241
;4, 4, 124, 4, 4,             // т        242
;0x0C, 0x50, 0x50, 0x50, 0x3C,// y        243
;24, 36, 124, 36, 24,         // ф        244
;0x44, 0x28, 0x10, 0x28, 0x44,// x        245
;124, 64, 64, 124, 192,       // ц        246
;12, 16, 16, 16, 124,         // ч        247
;124, 64, 120, 64, 124,       // ш        248
;124, 64, 120, 64, 252,       // щ        249
;124, 84, 80, 80, 32,         // ъ        250
;124,80,32,0,124,             // ы        251
;124, 80, 80, 80, 32,         // ь        252
;40, 68, 84, 84, 56,          // э        253
;124, 16, 56, 68, 56,         // ю        254
;72, 52, 20, 20, 124          // я        255
;};
;
;#ifdef _USE_SOFT_SPI
;//===============================================================
;//			        Программный SPI
;//===============================================================
;void Send_spi(unsigned char data)
; 0000 004F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;
;    ClearBit(LCD_PORT, LCD_DATA);
;PCODE: $0000000F VOL: 0
;	data -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;    if ((data & 128) == 128)   SetBit(LCD_PORT, LCD_DATA);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;    SetBit(LCD_PORT, LCD_CLK);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;    ClearBit(LCD_PORT, LCD_CLK);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;    ClearBit(LCD_PORT, LCD_DATA);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;    if ((data & 64) == 64) SetBit(LCD_PORT, LCD_DATA);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;    SetBit(LCD_PORT, LCD_CLK);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;    ClearBit(LCD_PORT, LCD_CLK);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;    ClearBit(LCD_PORT, LCD_DATA);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;    if ((data & 32) == 32) SetBit(LCD_PORT, LCD_DATA);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;    SetBit(LCD_PORT, LCD_CLK);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;    ClearBit(LCD_PORT, LCD_CLK);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;    ClearBit(LCD_PORT, LCD_DATA);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;    if ((data & 16) ==16)  SetBit(LCD_PORT, LCD_DATA);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;    SetBit(LCD_PORT, LCD_CLK);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;    ClearBit(LCD_PORT, LCD_CLK);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;    ClearBit(LCD_PORT, LCD_DATA);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;    if ((data & 8) == 8)   SetBit(LCD_PORT, LCD_DATA);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;    SetBit(LCD_PORT, LCD_CLK);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;    ClearBit(LCD_PORT, LCD_CLK);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;    ClearBit(LCD_PORT, LCD_DATA);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;    if ((data & 4) == 4)   SetBit(LCD_PORT, LCD_DATA);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;    SetBit(LCD_PORT, LCD_CLK);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;    ClearBit(LCD_PORT, LCD_CLK);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;    ClearBit(LCD_PORT, LCD_DATA);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;    if ((data & 2) == 2)   SetBit(LCD_PORT, LCD_DATA);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;    SetBit(LCD_PORT, LCD_CLK);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;    ClearBit(LCD_PORT, LCD_CLK);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;    ClearBit(LCD_PORT, LCD_DATA);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;    if ((data & 1) == 1)   SetBit(LCD_PORT, LCD_DATA);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;    SetBit(LCD_PORT, LCD_CLK);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;    ClearBit(LCD_PORT, LCD_CLK);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;}
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;#else // _USE_SOFT_SPI
;//===============================================================
;//			            Аппаратный SPI
;//===============================================================
;//void Send_spi(unsigned char data)
;//{
;//	//Частота сигнала SCK: Fкварца/16
;//    SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(0<<SPR1)|(1<<SPR0);
;//    SPDR = data;
;//    while(!(SPSR & (1<<SPIF)));
;//    SPCR = 0;
;//}
;
;#endif // _USE_SOFT_SPI
;
;//===============================================================
;//Функция записи команды/данных в LCD (RS==0 - команда, RS==1 - данные)
;//===============================================================
;void Send_to_lcd (unsigned char RS, unsigned char data)
;{
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;    ClearBit(LCD_PORT, LCD_CLK);
;PCODE: $0000007D VOL: 0
;	RS -> Y+1
;	data -> Y+0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;    ClearBit(LCD_PORT, LCD_DATA);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;    if ((RS_old != RS) || (!RS_old && !RS)) //Проверяем старое значение RS
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;    {
;        SetBit(LCD_PORT, LCD_CS);	// Установка CS
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;        if(RS)    SetBit(LCD_PORT, LCD_RS);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;        else      ClearBit(LCD_PORT, LCD_RS);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;        ClearBit(LCD_PORT, LCD_CS);	// Сброс CS
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;    }
;
;    Send_spi (data);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;
;    RS_old=RS;  //запоминаем значение RS
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;    ClearBit(LCD_PORT, LCD_DATA);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;}
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;
;//===============================================================
;//                        ИНИЦИАЛИЗАЦИЯ
;//===============================================================
;void LCD_init(void)
;{
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; Init_Port();
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; ClearBit(LCD_PORT, LCD_RESET);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; delay_ms(500);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; SetBit(LCD_PORT, LCD_RESET);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; delay_ms(500);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; Send_to_lcd(CMD, 0x01); //Программный сброс
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; Send_to_lcd(CMD, 0x36); //Memory Access Control (Направление заполнения области дисплея (памяти): 0bVHRXXXXX, V - запол ...
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;                         //H - заполнение по горизонтали (0 - слева-направо, 1 - справа-налево), R - меняются местами ст ...
; Send_to_lcd(DAT, 0x00); //Начальный адрес осей Х и У - левый верхний угол дисплея
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; Send_to_lcd(CMD, 0x11); //Выход из спящего режима
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; delay_ms(20);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; Send_to_lcd(CMD, 0x3a); //Установка цветовой палитры
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; #ifdef _8_BIT_COLOR
; Send_to_lcd(DAT, 0x02); //Байт на пиксель 256 цветов
; #else
; Send_to_lcd(DAT, 0x05); //Два байта на пиксель 65536 цветов
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; #endif
; delay_ms(20);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; Send_to_lcd(CMD, 0x29); //Включение дисплея
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;}
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;
;//===============================================================
;//         Задание угла поворота экрана
;//===============================================================
;void SetRotation (unsigned int angle)
;{
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;    rot=angle;
;PCODE: $000000D9 VOL: 0
;	angle -> Y+0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;    Send_to_lcd(CMD, 0x36);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;    switch (rot)
;PCODE: $000000E0 VOL: 0
;    {
;        case 0:
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;        Send_to_lcd(DAT, 0x00); //Начальный адрес осей Х и У - левый верхний угол дисплея
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;        break;
;PCODE: $000000E7 VOL: 0
;        //================================
;        case 90:
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;        Send_to_lcd(DAT, 0x40); //Начальный адрес осей Х и У - правый верхний угол дисплея
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;        break;
;PCODE: $000000EF VOL: 0
;        //================================
;        case 180:
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;        Send_to_lcd(DAT, 0xC0); //Начальный адрес осей Х и У - правый нижний угол дисплея
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;        break;
;PCODE: $000000F7 VOL: 0
;        //================================
;        case 270:
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;        Send_to_lcd(DAT, 0x80); //Начальный адрес осей Х и У - левый нижний угол дисплея
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;        break;
;PCODE: $000000FF VOL: 0
;        //================================
;    };
;PCODE: $00000100 VOL: 0
;}
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;
;//===============================================================
;//              Задание прямоугольной области экрана
;//===============================================================
;void SetArea(char x1, char x2, char y1, char y2)
;{
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;    Send_to_lcd( CMD, 0x2A );  //задаем область по X
;PCODE: $00000106 VOL: 0
;	x1 -> Y+3
;	x2 -> Y+2
;	y1 -> Y+1
;	y2 -> Y+0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;    Send_to_lcd( DAT, x1 );    //начальная
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;    Send_to_lcd( DAT, x2 );    //конечная
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;
;    Send_to_lcd( CMD, 0x2B );  //задаем область по Y
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;    Send_to_lcd( DAT, y1 );    //начальная
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;    Send_to_lcd( DAT, y2 );    //конечная
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;
;    Send_to_lcd( CMD, 0x2C );  //отправляем команду на начало записи в память и начинаем посылать данные
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;}
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;
;//===============================================================
;//                        Рисуем точку
;//===============================================================
;void Put_Pixel (char x, char y, unsigned int color)
;{
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;    SetArea( x, x, y, y );
;PCODE: $00000128 VOL: 0
;	x -> Y+3
;	y -> Y+2
;	color -> Y+0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;    SetBit(LCD_PORT, LCD_RS); //Передаются данные
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;
;    #ifdef _8_BIT_COLOR		//(8-ми битовая цветовая палитра (256 цветов))
;    Send_to_lcd( DAT, color );	//Данные - задаём цвет пикселя
;    #else			        //(16-ти битовая цветовая палитра (65536 цветов))
;    Send_to_lcd( DAT, (color >> 8) );
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;    Send_to_lcd( DAT, color );
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;    #endif
;}
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;
;//===============================================================
;//           Функция прорисовки символа на дисплее
;//===============================================================
;void Send_Symbol (unsigned char symbol, char x, char y, int t_color, int b_color, char zoom_width, char zoom_height)
;{
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; unsigned char temp_symbol, a, b, zw, zh, mask;
;
; if (symbol>127) symbol-=64;    //Убираем отсутствующую часть таблицы ASCII
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;	symbol -> Y+14
;	x -> Y+13
;	y -> Y+12
;	t_color -> Y+10
;	b_color -> Y+8
;	zoom_width -> Y+7
;	zoom_height -> Y+6
;	temp_symbol -> R17
;	a -> R16
;	b -> R19
;	zw -> R18
;	zh -> R21
;	mask -> R20
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; for ( a = 0; a < 5; a++) //Перебираю 5 байт, составляющих символ
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; {
;    temp_symbol = font_5x8[symbol-32][a];
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;    zw = 0;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;    while(zw != zoom_width) //Вывод байта выполняется zw раз
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;    {
;        mask=0x01;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;        switch(rot)
;PCODE: $00000165 VOL: 0
;        {
;            case 0: case 180: SetArea( x+zw, x+zw, y, y+(zoom_height*8)-1 ); break;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;            case 90: case 270: SetArea( x, x+(zoom_height*8)-1, y+zw, y+zw ); break;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;        }
;PCODE: $00000197 VOL: 0
;        SetBit(LCD_PORT, LCD_RS); //Передаются данные
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;        for ( b = 0; b < 8; b++ ) //Цикл перебирания 8 бит байта
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;        {
;            zh = zoom_height; //в zoom_height раз увеличится высота символа
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;            while(zh != 0) //Вывод пикселя выполняется z раз
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;            {
;                if (temp_symbol&mask)
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;                {
;                    #ifdef _8_BIT_COLOR	//(8-ми битовая цветовая палитра (256 цветов))
;                    Send_to_lcd( DAT, t_color ); //Данные - задаём цвет пикселя
;                    #else			        //(16-ти битовая цветовая палитра (65536 цветов))
;                    Send_to_lcd( DAT, (t_color >> 8) ); Send_to_lcd( DAT, t_color );
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;                    #endif
;                }
;                else
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;               {
;                    #ifdef _8_BIT_COLOR	//(8-ми битовая цветовая палитра (256 цветов))
;                    Send_to_lcd( DAT, b_color ); //Данные - задаём цвет пикселя
;                    #else			        //(16-ти битовая цветовая палитра (65536 цветов))
;                    Send_to_lcd( DAT, (b_color >> 8) ); Send_to_lcd( DAT, b_color );
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;                    #endif
;                }
;PCODE: $000001C1 VOL: 0
;                zh--;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;            }
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;            mask<<=1; //Смещаю содержимое mask на 1 бит влево;
;PCODE: $000001C6 VOL: 0
;        }
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;        zw++;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;    }
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;  switch(rot)
;PCODE: $000001D0 VOL: 0
;  {
;   case 0: case 180: x=x+zoom_width;  break; //Получить адрес начального пикселя по оси x для вывода очередного байта
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;   case 90: case 270: y=y+zoom_width; break; //Получить адрес начального пикселя по оси y для вывода очередного байта
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;  }
;PCODE: $000001EA VOL: 0
; }
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;}
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;
;//===============================================================
;// Функция вывода одного символа ASCII-кода
;//===============================================================
;void LCD_Putchar(char symbol, char x, char y, int t_color, int b_color, char zoom_width, char zoom_height)
;{
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;    unsigned char m;
;    if(zoom_width == 0)   zoom_width = 1;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;	symbol -> Y+9
;	x -> Y+8
;	y -> Y+7
;	t_color -> Y+5
;	b_color -> Y+3
;	zoom_width -> Y+2
;	zoom_height -> Y+1
;	m -> R17
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;    if(zoom_height == 0)  zoom_height = 1;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;    switch (rot)
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;    {
;        case 90: case 270:  m=y; y=x; x=m;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;                            break;
;PCODE: $00000212 VOL: 0
;    };
;PCODE: $00000213 VOL: 0
;    Send_Symbol( symbol, x, y, t_color, b_color, zoom_width, zoom_height);
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;}
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;
;//===============================================================
;//          Функция вывода строки, расположенной в ram
;//===============================================================
;void LCD_Puts(char *str, int x, int y,  int t_color, int b_color, char zoom_width, char zoom_height)
;{
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;    unsigned char i=0;
;
;    if(zoom_width == 0)   zoom_width = 1;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;	*str -> Y+11
;	x -> Y+9
;	y -> Y+7
;	t_color -> Y+5
;	b_color -> Y+3
;	zoom_width -> Y+2
;	zoom_height -> Y+1
;	i -> R17
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;    if(zoom_height == 0)  zoom_height = 1;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;
;    while (str[i]) //x и y - адрес пикселя начальной позиции; с увеличением переменной i адрес вывода очередного символа ...
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;    {
;        LCD_Putchar(str[i], x+(i*6*zoom_width), y, t_color, b_color, zoom_width, zoom_height);
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;        i++;
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;    }
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;}
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;
;//===============================================================
;//          Функция вывода строки, расположенной во flash
;//===============================================================
;void LCD_Putsf(flash char *str, int x, int y,  int t_color, int b_color, char zoom_width, char zoom_height)
;{
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; unsigned char i=0;
;
; if(zoom_width == 0)   zoom_width = 1;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;	*str -> Y+11
;	x -> Y+9
;	y -> Y+7
;	t_color -> Y+5
;	b_color -> Y+3
;	zoom_width -> Y+2
;	zoom_height -> Y+1
;	i -> R17
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; if(zoom_height == 0)  zoom_height = 1;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;
; while (str[i]) //x и y - адрес пикселя начальной позиции; с увеличением переменной i адрес вывода очередного символа см ...
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; {
;  LCD_Putchar(str[i], x+(i*6*zoom_width), y, t_color, b_color, zoom_width, zoom_height);
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;  i++;
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; }
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;}
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;
;//===============================================================
;//     Функция прорисовки символа на дисплее без цвета фона
;//===============================================================
;void Send_Symbol_Shadow (unsigned char symbol, char x, char y, int t_color, char zoom_width, char zoom_height)
;{
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; unsigned char temp_symbol, a, b, zw, zh, mask;
; char m, n;
; m=x;
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;	symbol -> Y+14
;	x -> Y+13
;	y -> Y+12
;	t_color -> Y+10
;	zoom_width -> Y+9
;	zoom_height -> Y+8
;	temp_symbol -> R17
;	a -> R16
;	b -> R19
;	zw -> R18
;	zh -> R21
;	mask -> R20
;	m -> Y+7
;	n -> Y+6
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; n=y;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; if (symbol>127) symbol-=64;    //Убираем отсутствующую часть таблицы ASCII
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; for ( a = 0; a < 5; a++) //Перебираю 5 байт, составляющих символ
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; {
;  temp_symbol = font_5x8[symbol-32][a];
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;  zw = 0;
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;  while(zw != zoom_width) //Вывод байта выполняется zw раз
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;  {
;   switch(rot)
;PCODE: $000002C1 VOL: 0
;   {
;    case 0: case 180: n=y; break;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;    case 90: case 270: m=x; break;
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;   }
;PCODE: $000002D7 VOL: 0
;   mask=0x01;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;   for ( b = 0; b < 8; b++ ) //Цикл перебирания 8 бит байта
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;   {
;    zh = 0; //в zoom_height раз увеличится высота символа
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;    while(zh != zoom_height) //Вывод пикселя выполняется z раз
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;    {
;     switch(rot)
;PCODE: $000002E9 VOL: 0
;     {
;      case 0: case 180:
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;      if (temp_symbol&mask)
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;      {
;       Put_Pixel (m+zw, n+zh, t_color);
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;      }
;      break;
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;      case 90: case 270:
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;      if (temp_symbol&mask)
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;      {
;       Put_Pixel (m+zh, n+zw, t_color);
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;      }
;      break; //Получить адрес начального пикселя по оси y для вывода очередного байта
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;     }
;PCODE: $00000317 VOL: 0
;     zh++;
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;    }
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;    mask<<=1; //Смещаю содержимое mask на 1 бит влево;
;PCODE: $0000031C VOL: 0
;    switch(rot)
;PCODE: $0000031D VOL: 0
;    {
;     case 0: case 180: n=n+zoom_height; break;
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;     case 90: case 270: m=m+zoom_height; break;
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;    }
;PCODE: $00000337 VOL: 0
;   }
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;   zw++;
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;  }
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;  switch(rot)
;PCODE: $00000341 VOL: 0
;  {
;   case 0: case 180: m=m+zoom_width; break;
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;   case 90: case 270: n=n+zoom_width; break;
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;  }
;PCODE: $0000035B VOL: 0
; }
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;}
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;
;//===============================================================
;// Функция вывода одного символа ASCII-кода без цвета фона
;//===============================================================
;void LCD_Putchar_Shadow (char symbol, char x, char y, int t_color, char zoom_width, char zoom_height)
;{
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; unsigned char m;
; if(zoom_width == 0)   zoom_width = 1;
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;	symbol -> Y+7
;	x -> Y+6
;	y -> Y+5
;	t_color -> Y+3
;	zoom_width -> Y+2
;	zoom_height -> Y+1
;	m -> R17
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; if(zoom_height == 0)  zoom_height = 1;
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; switch (rot)
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; {
;    case 90: case 270:  m=y; y=x; x=m;
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;                        break;
;PCODE: $00000383 VOL: 0
; };
;PCODE: $00000384 VOL: 0
; Send_Symbol_Shadow( symbol, x, y, t_color, zoom_width, zoom_height);
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;}
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;
;//===============================================================
;//   Функция вывода строки, расположенной в ram без цвета фона
;//===============================================================
;void LCD_Puts_Shadow(char *str, int x, int y,  int t_color, char zoom_width, char zoom_height)
;{
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; unsigned char i=0;
;
; if(zoom_width == 0)   zoom_width = 1;
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;	*str -> Y+9
;	x -> Y+7
;	y -> Y+5
;	t_color -> Y+3
;	zoom_width -> Y+2
;	zoom_height -> Y+1
;	i -> R17
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
; if(zoom_height == 0)  zoom_height = 1;
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;
; while (str[i]) //x и y - адрес пикселя начальной позиции; с увеличением переменной i адрес вывода очередного символа см ...
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; {
;  LCD_Putchar_Shadow(str[i], x+(i*6*zoom_width), y, t_color, zoom_width, zoom_height);
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;  i++;
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; }
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;}
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;
;//===============================================================
;// Функция вывода строки, расположенной во flash без цвета фона
;//===============================================================
;void LCD_Putsf_Shadow(flash char *str, int x, int y,  int t_color, char zoom_width, char zoom_height)
;{
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; unsigned char i=0;
;
; if(zoom_width == 0)   zoom_width = 1;
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;	*str -> Y+9
;	x -> Y+7
;	y -> Y+5
;	t_color -> Y+3
;	zoom_width -> Y+2
;	zoom_height -> Y+1
;	i -> R17
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
; if(zoom_height == 0)  zoom_height = 1;
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;
; while (str[i])
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; {
;  LCD_Putchar_Shadow(str[i], x+(i*6*zoom_width), y, t_color, zoom_width, zoom_height);
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;  i++;
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; }
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;}
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;
;//===============================================================
;//                  ЗАЛИВКА ЭКРАНА ЦВЕТОМ
;//===============================================================
;void LCD_FillScreen (unsigned int color)
;{
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; unsigned int x;
; SetArea( 0, 131, 0, 175 );   //Область всего экрана
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;	color -> Y+2
;	x -> R16,R17
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; SetBit(LCD_PORT, LCD_RS);
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;
; //Данные - задаём цвет пикселя
; for (x = 0; x < 132*176; x++)
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; {
;  #ifdef _8_BIT_COLOR	//(8-ми битовая цветовая палитра (256 цветов))
;  Send_to_lcd( DAT, color ); //Данные - задаём цвет пикселя
;  #else			//(16-ти битовая цветовая палитра (65536 цветов))
;  Send_to_lcd( DAT, (color >> 8) ); Send_to_lcd( DAT, color );
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;  #endif
; }
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;}
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;
;//===============================================================
;//                 ФУНКЦИЯ ВЫВОДА ИЗОБРАЖЕНИЯ
;//===============================================================
;void LCD_Output_image (char x, char y, char width, char height, flash char *img)
;{
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; unsigned char m;
; switch (rot)
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;	x -> Y+6
;	y -> Y+5
;	width -> Y+4
;	height -> Y+3
;	*img -> Y+1
;	m -> R17
;PCODE: $0000042E VOL: 0
; {
;    case 90: case 270:  m=y; y=x; x=m;
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;                        break;
;PCODE: $0000043C VOL: 0
; };
;PCODE: $0000043D VOL: 0
; Send_Image (x, y, width, height, img);
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;}
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;
;//===============================================================
;//          Функция для обеспечения вывода изображения
;//===============================================================
;//Вывод картинки с Image2Lcd и NokiaImageCreator должен выполняться слева-направо сверху-вниз.
;//x, y - начало области вывода изображения; width и height - ширина и высота изображения
;void Send_Image (char x, char y, char width, char height, flash char *img)
;{
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; char x1, y1;
;
; switch (rot)
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;	x -> Y+7
;	y -> Y+6
;	width -> Y+5
;	height -> Y+4
;	*img -> Y+2
;	x1 -> R17
;	y1 -> R16
;PCODE: $00000451 VOL: 0
; {
;  case 0: case 180:
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;  for(y1=y; y1<(y+height); y1++)
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;  {
;   SetArea( x, x+(width-1), y1, y1 );
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;   for(x1=x; x1<x+width; x1++)
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;   {
;    #ifdef _8_BIT_COLOR	//(8-ми битовая цветовая палитра (256 цветов))
;    Send_to_lcd( DAT, *img++ ); //Данные - задаём цвет пикселя
;    #else			//(16-ти битовая цветовая палитра (65536 цветов))
;    Send_to_lcd( DAT, *img++ ); Send_to_lcd( DAT, *img++ );
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;    #endif
;   }
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;  }
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;  break;
;PCODE: $0000049B VOL: 0
;
;  case 90: case 270:
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;  for(x1=x; x1<x+height; x1++)
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;  {
;   SetArea( x1, x1, y, y+(width-1) );
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;   for(y1=y; y1<y+width; y1++)
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;   {
;    #ifdef _8_BIT_COLOR	//(8-ми битовая цветовая палитра (256 цветов))
;    Send_to_lcd( DAT, *img++ ); //Данные - задаём цвет пикселя
;    #else			//(16-ти битовая цветовая палитра (65536 цветов))
;    Send_to_lcd( DAT, *img++ ); Send_to_lcd( DAT, *img++ );
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;    #endif
;   }
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;  }
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;  break;
;PCODE: $000004E5 VOL: 0
; };
;PCODE: $000004E6 VOL: 0
;}
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;
;#ifdef _GEOMETRICAL
;//===============================================================
;//                      НАРИСОВАТЬ ЛИНИЮ
;//===============================================================
;void LCD_DrawLine (char x1, char y1, char x2, char y2, int color)
;{
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
; short  x, y, d, dx, dy, i, i1, i2, kx, ky;
; signed char flag;
; unsigned char m;
;
; switch (rot)
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;	x1 -> Y+27
;	y1 -> Y+26
;	x2 -> Y+25
;	y2 -> Y+24
;	color -> Y+22
;	x -> R16,R17
;	y -> R18,R19
;	d -> R20,R21
;	dx -> Y+20
;	dy -> Y+18
;	i -> Y+16
;	i1 -> Y+14
;	i2 -> Y+12
;	kx -> Y+10
;	ky -> Y+8
;	flag -> Y+7
;	m -> Y+6
;PCODE: $000004F0 VOL: 0
; {
;    case 90: case 270:  m=y1; y1=x1; x1=m; m=y2; y2=x2; x2=m;
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;                        break;
;PCODE: $00000504 VOL: 0
; };
;PCODE: $00000505 VOL: 0
;
; dx = x2 - x1;
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
; dy = y2 - y1;
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
; if (dx == 0 && dy == 0) Put_Pixel(x1, y1, color);  //Точка
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
; else      //Линия
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
; {
;  kx = 1;
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;  ky = 1;
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;  if( dx < 0 )
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;  {
;   dx = -dx;
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;   kx = -1;
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;  }
;  else
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;  if(dx == 0) kx = 0;
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;  if(dy < 0)
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;  {
;   dy = -dy;
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;   ky = -1;
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;  }
;  if(dx < dy)
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;  {
;   flag = 0;
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;   d = dx;
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;   dx = dy;
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;   dy = d;
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;  }
;  else flag = 1;
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;  i1 = dy + dy;
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;  d = i1 - dx;
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;  i2 = d - dx;
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;  x = x1;
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;  y = y1;
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;
;  for(i=0; i < dx; i++)
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;  {
;   Put_Pixel(x, y, color);
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;   if(flag) x += kx;
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;   else y += ky;
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;   if( d < 0 ) d += i1;
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;   else
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;   {
;    d += i2;
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;    if(flag) y += ky;
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;    else x += kx;
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;   }
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;  }
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;  Put_Pixel(x, y, color);
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
; }
;PCODE: $000005A0 VOL: 0
;}
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;
;//===============================================================
;//             НАРИСОВАТЬ ЛИНИЮ С ЗАДАВАЕМОЙ ШИРИНОЙ
;//===============================================================
;void LCD_FillLine (char tx1, char ty1, char tx2, char ty2, char width, int color)
;{
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;    signed long x, y, addx, dx, dy;
;    signed long P;
;    int i;
;    long x1,x2,y1,y2;
;
;   if(ty1>ty2)  {y1=ty2; y2=ty1; x1=tx2; x2=tx1;}
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;	tx1 -> Y+48
;	ty1 -> Y+47
;	tx2 -> Y+46
;	ty2 -> Y+45
;	width -> Y+44
;	color -> Y+42
;	x -> Y+38
;	y -> Y+34
;	addx -> Y+30
;	dx -> Y+26
;	dy -> Y+22
;	P -> Y+18
;	i -> R16,R17
;	x1 -> Y+14
;	x2 -> Y+10
;	y1 -> Y+6
;	y2 -> Y+2
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;   else         {y1=ty1; y2=ty2; x1=tx1; x2=tx2;}
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;    dx = x2 - x1;
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;    dy = y2 - y1;
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;   if(dx<0)     dx=-dx;
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;   if(dy<0)     dy=-dy;
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;    x = x1;
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;    y = y1;
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;
;   if(x1 > x2)  addx = -1;
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;   else         addx = 1;
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;
;   if(dx >= dy)
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;   {
;    P = 2*dy - dx;
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;
;      for(i=0; i<=dx; ++i)
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;      {
;        LCD_FillRect (x, y, width, width, color);
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;
;         if(P < 0)
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;         {
;            P += 2*dy;
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;            x += addx;
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;         }
;         else
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;         {
;            P += 2*dy - 2*dx;
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;            x += addx;
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;            y ++;
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;         }
;PCODE: $0000062B VOL: 0
;      }
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;   }
;   else
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;   {
;    P = 2*dx - dy;
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;
;      for(i=0; i<=dy; ++i)
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;      {
;        LCD_FillRect (x, y, width, width, color);
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;
;         if(P < 0)
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;         {
;            P += 2*dx;
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;            y ++;
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;         }
;         else
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;         {
;            P += 2*dx - 2*dy;
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;            x += addx;
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;            y ++;
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;         }
;PCODE: $0000066B VOL: 0
;      }
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;   }
;PCODE: $00000671 VOL: 0
;}
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;
;//===============================================================
;//			НАРИСОВАТЬ РАМКУ
;//===============================================================
;void LCD_DrawRect (char x1, char y1, char width, char height, char size, int color)
;{
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
; unsigned int i;
; char x2=x1+(width-1), y2=y1+(height-1); //Конечные размеры рамки по осям х и у
;
;  for( i=1; i<=size; i++)   // size - толщина рамки
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;	x1 -> Y+10
;	y1 -> Y+9
;	width -> Y+8
;	height -> Y+7
;	size -> Y+6
;	color -> Y+4
;	i -> R16,R17
;	x2 -> R19
;	y2 -> R18
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
; {
;  LCD_DrawLine(x1, y1, x1, y2, color);
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;  LCD_DrawLine(x2, y1, x2, y2, color);
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;  LCD_DrawLine(x1, y1, x2, y1, color);
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;  LCD_DrawLine(x1, y2, x2, y2, color);
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
;  x1++; // Увеличиваю толщину рамки, если это задано
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;  y1++;
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;  x2--;
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;  y2--;
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
; }
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;}
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;
;//===============================================================
;//              ЗАПОЛНИТЬ ПРЯМОУГОЛЬНИК ЦВЕТОМ COLOR
;//===============================================================
;void LCD_FillRect (char x1, char y1, char width, char height, int color)
;{
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
; unsigned int x;
; unsigned char m;
;
; switch (rot)
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;	x1 -> Y+9
;	y1 -> Y+8
;	width -> Y+7
;	height -> Y+6
;	color -> Y+4
;	x -> R16,R17
;	m -> R19
;PCODE: $000006C6 VOL: 0
; {
;    case 90: case 270:  m=y1; y1=x1; x1=m; m=width; width=height; height=m; break;
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
; };
;PCODE: $000006DB VOL: 0
;
; SetArea( x1, x1+(width-1), y1, y1+(height-1) );
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
; SetBit(LCD_PORT, LCD_RS);
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
;
; for (x = 0; x < width * height; x++)
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
; {
;  #ifdef _8_BIT_COLOR	//(8-ми битовая цветовая палитра (256 цветов))
;  Send_to_lcd( DAT, color ); //Данные - задаём цвет пикселя
;  #else			//(16-ти битовая цветовая палитра (65536 цветов))
;  Send_to_lcd( DAT, (color >> 8) ); Send_to_lcd( DAT, color );
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;  #endif
; }
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;}
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;
;//===============================================================
;//                  НАРИСОВАТЬ ОКРУЖНОСТЬ
;//===============================================================
;void LCD_DrawCircle (char xcenter, char ycenter, char rad, int color)
;{
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;    signed int k, b, P;
;    unsigned char m;
;
;    switch (rot)
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;	xcenter -> Y+11
;	ycenter -> Y+10
;	rad -> Y+9
;	color -> Y+7
;	k -> R16,R17
;	b -> R18,R19
;	P -> R20,R21
;	m -> Y+6
;PCODE: $00000711 VOL: 0
;    {
;        case 90: case 270:  m=ycenter; ycenter=xcenter; xcenter=m; break;
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
;    };
;PCODE: $00000720 VOL: 0
;
;    k = 0;
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
;    b = rad;
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;    P = 1 - rad;
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;    do
;PCODE: $0000072B VOL: 0
;    {
;        Put_Pixel(k+xcenter, b+ycenter, color);
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;        Put_Pixel(b+xcenter, k+ycenter, color);
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;        Put_Pixel(xcenter-k, b+ycenter, color);
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
;PCODE: $00000743 VOL: 0
;        Put_Pixel(xcenter-b, k+ycenter, color);
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
;        Put_Pixel(b+xcenter, ycenter-k, color);
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
;        Put_Pixel(k+xcenter, ycenter-b, color);
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
;PCODE: $0000075B VOL: 0
;        Put_Pixel(xcenter-k, ycenter-b, color);
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
;        Put_Pixel(xcenter-b, ycenter-k, color);
;PCODE: $00000764 VOL: 0
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
;
;        if(P < 0)   P+= 3 + 2*k++;
;PCODE: $0000076C VOL: 0
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;        else        P+= 5 + 2*(k++ - b--);
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
;    } while(k <= b);
;PCODE: $00000784 VOL: 0
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
;PCODE: $0000078A VOL: 0
;}
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
;
;
;//===============================================================
;//                 ЗАПОЛНИТЬ КРУГ ЦВЕТОМ COLOR
;//===============================================================
;void LCD_FillCircle (char xcenter, char ycenter, char rad, int color)
;{
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;    signed int x1=0, y1, tswitch;
;    y1 = rad;
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;	xcenter -> Y+10
;	ycenter -> Y+9
;	rad -> Y+8
;	color -> Y+6
;	x1 -> R16,R17
;	y1 -> R18,R19
;	tswitch -> R20,R21
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
;    tswitch = 1 - rad;
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;
;    do
;PCODE: $0000079D VOL: 0
;    {
;        LCD_DrawLine(xcenter-x1, ycenter+y1, xcenter+x1, ycenter+y1, color);
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
;PCODE: $000007AE VOL: 0
;        LCD_DrawLine(xcenter-x1, ycenter-y1, xcenter+x1, ycenter-y1, color);
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
;PCODE: $000007B4 VOL: 0
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 0
;        LCD_DrawLine(xcenter-y1, ycenter+x1, xcenter+y1, ycenter+x1, color);
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
;PCODE: $000007C5 VOL: 0
;PCODE: $000007C6 VOL: 0
;PCODE: $000007C7 VOL: 0
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
;        LCD_DrawLine(xcenter-y1, ycenter-x1, xcenter+y1, ycenter-x1, color);
;PCODE: $000007CF VOL: 0
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
;PCODE: $000007D8 VOL: 0
;PCODE: $000007D9 VOL: 0
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
;PCODE: $000007DC VOL: 0
;PCODE: $000007DD VOL: 0
;
;    if(tswitch < 0)
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
;    tswitch+= 3 + 2*x1++;
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;PCODE: $000007E6 VOL: 0
;    else
;PCODE: $000007E7 VOL: 0
;PCODE: $000007E8 VOL: 0
;    tswitch+= 5 + 2*(x1++ - y1--);
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
;PCODE: $000007EB VOL: 0
;PCODE: $000007EC VOL: 0
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
;    } while(x1 <= y1);
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
;}
;PCODE: $000007FD VOL: 0
;PCODE: $000007FE VOL: 0
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
;
;//===============================================================
;//                     НАРИСОВАТЬ ТРЕУГОЛЬНИК
;//===============================================================
;void LCD_DrawTriangle(char x1, char y1, char x2, char y2, char x3, char y3, int color)
;{
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
; LCD_DrawLine(x1, y1, x2, y2, color);
;PCODE: $00000803 VOL: 0
;	x1 -> Y+7
;	y1 -> Y+6
;	x2 -> Y+5
;	y2 -> Y+4
;	x3 -> Y+3
;	y3 -> Y+2
;	color -> Y+0
;PCODE: $00000804 VOL: 0
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
;PCODE: $00000809 VOL: 0
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
; LCD_DrawLine(x3, y3, x1, y1, color);
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
;PCODE: $00000814 VOL: 0
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
; LCD_DrawLine(x3, y3, x2, y2, color);
;PCODE: $00000818 VOL: 0
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0
;PCODE: $0000081B VOL: 0
;PCODE: $0000081C VOL: 0
;PCODE: $0000081D VOL: 0
;PCODE: $0000081E VOL: 0
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
;}
;PCODE: $00000822 VOL: 0
;PCODE: $00000823 VOL: 0
;PCODE: $00000824 VOL: 0
;
;//===============================================================
;//              ЗАПОЛНИТЬ ТРЕУГОЛЬНИК ЦВЕТОМ COLOR
;//===============================================================
;void LCD_FillTriangle(char x1, char y1, char x2, char y2, char x3, char y3, int color)
;{
;PCODE: $00000825 VOL: 0
;PCODE: $00000826 VOL: 0
; LCD_FillTriangleA(x1, y1, x2, y2, x3, y3, color);
;PCODE: $00000827 VOL: 0
;	x1 -> Y+7
;	y1 -> Y+6
;	x2 -> Y+5
;	y2 -> Y+4
;	x3 -> Y+3
;	y3 -> Y+2
;	color -> Y+0
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
;PCODE: $0000082B VOL: 0
;PCODE: $0000082C VOL: 0
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
;PCODE: $00000831 VOL: 0
;PCODE: $00000832 VOL: 0
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
;PCODE: $00000835 VOL: 0
; LCD_FillTriangleA(x3, y3, x1, y1, x2, y2, color);
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
;PCODE: $0000083E VOL: 0
;PCODE: $0000083F VOL: 0
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
; LCD_FillTriangleA(x3, y3, x2, y2, x1, y1, color);
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;PCODE: $00000851 VOL: 0
;}
;PCODE: $00000852 VOL: 0
;PCODE: $00000853 VOL: 0
;PCODE: $00000854 VOL: 0
;
;//===============================================================
;void LCD_FillTriangleA(char x1, char y1, char x2, char y2, char x3, char y3, int color)
;{
;PCODE: $00000855 VOL: 0
;PCODE: $00000856 VOL: 0
; signed long x, y, addx, dx, dy;
; signed long P;
; int i;
; long a1,a2,b1,b2;
; if(y1>y2)  {b1=y2; b2=y1; a1=x2; a2=x1;}
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
;PCODE: $00000859 VOL: 0
;	x1 -> Y+49
;	y1 -> Y+48
;	x2 -> Y+47
;	y2 -> Y+46
;	x3 -> Y+45
;	y3 -> Y+44
;	color -> Y+42
;	x -> Y+38
;	y -> Y+34
;	addx -> Y+30
;	dx -> Y+26
;	dy -> Y+22
;	P -> Y+18
;	i -> R16,R17
;	a1 -> Y+14
;	a2 -> Y+10
;	b1 -> Y+6
;	b2 -> Y+2
;PCODE: $0000085A VOL: 0
;PCODE: $0000085B VOL: 0
;PCODE: $0000085C VOL: 0
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
;PCODE: $00000862 VOL: 0
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
;PCODE: $00000866 VOL: 0
;PCODE: $00000867 VOL: 0
;PCODE: $00000868 VOL: 0
;PCODE: $00000869 VOL: 0
; else       {b1=y1; b2=y2; a1=x1; a2=x2;}
;PCODE: $0000086A VOL: 0
;PCODE: $0000086B VOL: 0
;PCODE: $0000086C VOL: 0
;PCODE: $0000086D VOL: 0
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
;PCODE: $00000878 VOL: 0
; dx = a2 -a1;
;PCODE: $00000879 VOL: 0
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
; dy = b2 - b1;
;PCODE: $0000087D VOL: 0
;PCODE: $0000087E VOL: 0
;PCODE: $0000087F VOL: 0
;PCODE: $00000880 VOL: 0
; if(dx<0)dx=-dx;
;PCODE: $00000881 VOL: 0
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
;PCODE: $00000885 VOL: 0
;PCODE: $00000886 VOL: 0
; if(dy<0)dy=-dy;
;PCODE: $00000887 VOL: 0
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
;PCODE: $0000088A VOL: 0
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
;PCODE: $0000088D VOL: 0
; x = a1;
;PCODE: $0000088E VOL: 0
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
; y = b1;
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
;
; if(a1 > a2)    addx = -1;
;PCODE: $00000893 VOL: 0
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
; else           addx = 1;
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
;PCODE: $0000089B VOL: 0
;PCODE: $0000089C VOL: 0
;
; if(dx >= dy)
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;PCODE: $000008A1 VOL: 0
; {
;  P = 2*dy - dx;
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
;PCODE: $000008A4 VOL: 0
;PCODE: $000008A5 VOL: 0
;PCODE: $000008A6 VOL: 0
;  for(i=0; i<=dx; ++i)
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
;PCODE: $000008A9 VOL: 0
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
;  {
;   LCD_DrawLine((int)x, (int)y, x3, y3, color);
;PCODE: $000008B2 VOL: 0
;PCODE: $000008B3 VOL: 0
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
;PCODE: $000008B9 VOL: 0
;PCODE: $000008BA VOL: 0
;PCODE: $000008BB VOL: 0
;   if(P < 0)
;PCODE: $000008BC VOL: 0
;PCODE: $000008BD VOL: 0
;PCODE: $000008BE VOL: 0
;   {
;    P += 2*dy;
;PCODE: $000008BF VOL: 0
;PCODE: $000008C0 VOL: 0
;PCODE: $000008C1 VOL: 0
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
;    x += addx;
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
;PCODE: $000008C7 VOL: 0
;   }
;   else
;PCODE: $000008C8 VOL: 0
;PCODE: $000008C9 VOL: 0
;   {
;    P += 2*dy - 2*dx;
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
;PCODE: $000008CC VOL: 0
;PCODE: $000008CD VOL: 0
;PCODE: $000008CE VOL: 0
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
;    x += addx;
;PCODE: $000008D4 VOL: 0
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
;    y ++;
;PCODE: $000008D8 VOL: 0
;PCODE: $000008D9 VOL: 0
;PCODE: $000008DA VOL: 0
;   }
;PCODE: $000008DB VOL: 0
;  }
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
;PCODE: $000008DE VOL: 0
;PCODE: $000008DF VOL: 0
;PCODE: $000008E0 VOL: 0
; }
; else
;PCODE: $000008E1 VOL: 0
;PCODE: $000008E2 VOL: 0
; {
;  P = 2*dx - dy;
;PCODE: $000008E3 VOL: 0
;PCODE: $000008E4 VOL: 0
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
;PCODE: $000008E7 VOL: 0
;  for(i=0; i<=dy; ++i)
;PCODE: $000008E8 VOL: 0
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
;PCODE: $000008EC VOL: 0
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
;PCODE: $000008F2 VOL: 0
;  {
;   LCD_DrawLine((int)x, (int)y, x3, y3, color);
;PCODE: $000008F3 VOL: 0
;PCODE: $000008F4 VOL: 0
;PCODE: $000008F5 VOL: 0
;PCODE: $000008F6 VOL: 0
;PCODE: $000008F7 VOL: 0
;PCODE: $000008F8 VOL: 0
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
;PCODE: $000008FB VOL: 0
;PCODE: $000008FC VOL: 0
;   if(P < 0)
;PCODE: $000008FD VOL: 0
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
;   {
;    P += 2*dx;
;PCODE: $00000900 VOL: 0
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
;    y ++;
;PCODE: $00000905 VOL: 0
;PCODE: $00000906 VOL: 0
;PCODE: $00000907 VOL: 0
;   }
;   else
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
;   {
;    P += 2*dx - 2*dy;
;PCODE: $0000090A VOL: 0
;PCODE: $0000090B VOL: 0
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
;PCODE: $0000090F VOL: 0
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
;    x += addx;
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
;    y ++;
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
;PCODE: $0000091A VOL: 0
;   }
;PCODE: $0000091B VOL: 0
;  }
;PCODE: $0000091C VOL: 0
;PCODE: $0000091D VOL: 0
;PCODE: $0000091E VOL: 0
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
; }
;PCODE: $00000921 VOL: 0
;}
;PCODE: $00000922 VOL: 0
;PCODE: $00000923 VOL: 0
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
;
;//===============================================================
;//      Функция прорисовки графика состояния 0-100%
;//===============================================================
;// percent - число от 0 до 100, x и y - начальная позиция графика (верхний левый угол), width - ширина графика, zoom_hei ...
;// (при zoom_height=1 высота одной ячейки составляет 5 пикселей)
;void LCD_Put_Graph (char percent, char x, char y, int t_color, int b_color, char width, char zoom_height)
;{
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
;    char i, j=0, m, array[20];
;    for (i = 0; i < percent; i += 5)
;PCODE: $00000928 VOL: 0
;PCODE: $00000929 VOL: 0
;PCODE: $0000092A VOL: 0
;	percent -> Y+32
;	x -> Y+31
;	y -> Y+30
;	t_color -> Y+28
;	b_color -> Y+26
;	width -> Y+25
;	zoom_height -> Y+24
;	i -> R17
;	j -> R16
;	m -> R19
;	array -> Y+4
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
;PCODE: $00000933 VOL: 0
;PCODE: $00000934 VOL: 0
;PCODE: $00000935 VOL: 0
;    {
;        if (i + 5 > percent)
;PCODE: $00000936 VOL: 0
;PCODE: $00000937 VOL: 0
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
;PCODE: $0000093D VOL: 0
;        {
;            array[j++] = percent-i;
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
;PCODE: $00000942 VOL: 0
;PCODE: $00000943 VOL: 0
;PCODE: $00000944 VOL: 0
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
;        }
;        else
;PCODE: $00000947 VOL: 0
;PCODE: $00000948 VOL: 0
;        {
;            array[j++] = 5;
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
;PCODE: $0000094D VOL: 0
;PCODE: $0000094E VOL: 0
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
;        }
;PCODE: $00000951 VOL: 0
;    }
;PCODE: $00000952 VOL: 0
;PCODE: $00000953 VOL: 0
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
;    for (i=j; i<20; i++) //Заполнение оставшейся части нулями
;PCODE: $00000957 VOL: 0
;PCODE: $00000958 VOL: 0
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
;PCODE: $0000095C VOL: 0
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
;    {
;        array[i] = 0;
;PCODE: $00000960 VOL: 0
;PCODE: $00000961 VOL: 0
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
;PCODE: $00000965 VOL: 0
;    }
;PCODE: $00000966 VOL: 0
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
;PCODE: $00000969 VOL: 0
;PCODE: $0000096A VOL: 0
;
;    switch (rot)
;PCODE: $0000096B VOL: 0
;    {
;        case 270:   // Обновление дисплея Снизу-вверх
;PCODE: $0000096C VOL: 0
;PCODE: $0000096D VOL: 0
;                    Send_to_lcd(CMD, 0x36);
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
;PCODE: $00000971 VOL: 0
;                    Send_to_lcd(DAT, 0x80); //Начальный адрес осей Х и У - левый нижний угол дисплея
;PCODE: $00000972 VOL: 0
;PCODE: $00000973 VOL: 0
;PCODE: $00000974 VOL: 0
;PCODE: $00000975 VOL: 0
;                    break;
;PCODE: $00000976 VOL: 0
;        default:    // Обновление дисплея Слева-направо, сверху-вниз
;PCODE: $00000977 VOL: 0
;                    Send_to_lcd(CMD, 0x36);
;PCODE: $00000978 VOL: 0
;PCODE: $00000979 VOL: 0
;PCODE: $0000097A VOL: 0
;PCODE: $0000097B VOL: 0
;                    Send_to_lcd(DAT, 0x00); //Начальный адрес осей Х и У - левый верхний угол дисплея
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
;PCODE: $0000097E VOL: 0
;PCODE: $0000097F VOL: 0
;    }
;PCODE: $00000980 VOL: 0
;
;
;    for (i=0; i<20; i++)
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
;PCODE: $00000983 VOL: 0
;PCODE: $00000984 VOL: 0
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
;PCODE: $00000987 VOL: 0
;PCODE: $00000988 VOL: 0
;PCODE: $00000989 VOL: 0
;    {
;        if (array[i]==5) //Нарисовать закрашенную ячейку (5%)
;PCODE: $0000098A VOL: 0
;PCODE: $0000098B VOL: 0
;PCODE: $0000098C VOL: 0
;PCODE: $0000098D VOL: 0
;PCODE: $0000098E VOL: 0
;PCODE: $0000098F VOL: 0
;PCODE: $00000990 VOL: 0
;        {
;                switch (rot)
;PCODE: $00000991 VOL: 0
;                {
;                    case 0:     SetArea (x, x+(5*zoom_height-1), y, y+(width-1));
;PCODE: $00000992 VOL: 0
;PCODE: $00000993 VOL: 0
;PCODE: $00000994 VOL: 0
;PCODE: $00000995 VOL: 0
;PCODE: $00000996 VOL: 0
;PCODE: $00000997 VOL: 0
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
;PCODE: $0000099A VOL: 0
;PCODE: $0000099B VOL: 0
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
;PCODE: $0000099E VOL: 0
;PCODE: $0000099F VOL: 0
;PCODE: $000009A0 VOL: 0
;PCODE: $000009A1 VOL: 0
;PCODE: $000009A2 VOL: 0
;PCODE: $000009A3 VOL: 0
;                                break;
;PCODE: $000009A4 VOL: 0
;                    default:    SetArea (x, x+(width-1), y, y+(5*zoom_height-1));
;PCODE: $000009A5 VOL: 0
;PCODE: $000009A6 VOL: 0
;PCODE: $000009A7 VOL: 0
;PCODE: $000009A8 VOL: 0
;PCODE: $000009A9 VOL: 0
;PCODE: $000009AA VOL: 0
;PCODE: $000009AB VOL: 0
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
;PCODE: $000009AE VOL: 0
;PCODE: $000009AF VOL: 0
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
;PCODE: $000009B2 VOL: 0
;PCODE: $000009B3 VOL: 0
;PCODE: $000009B4 VOL: 0
;PCODE: $000009B5 VOL: 0
;                }
;PCODE: $000009B6 VOL: 0
;
;                for(j = 0; j < width*(5*zoom_height); j++)
;PCODE: $000009B7 VOL: 0
;PCODE: $000009B8 VOL: 0
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
;PCODE: $000009BB VOL: 0
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
;PCODE: $000009BE VOL: 0
;PCODE: $000009BF VOL: 0
;PCODE: $000009C0 VOL: 0
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
;PCODE: $000009C3 VOL: 0
;PCODE: $000009C4 VOL: 0
;PCODE: $000009C5 VOL: 0
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
;PCODE: $000009C8 VOL: 0
;                {
;                    #ifdef _8_BIT_COLOR	//(8-ми битовая цветовая палитра (256 цветов))
;                    Send_to_lcd( DAT, t_color ); //Данные - задаём цвет пикселя
;                    #else			        //(16-ти битовая цветовая палитра (65536 цветов))
;                    Send_to_lcd( DAT, (t_color >> 8) ); Send_to_lcd( DAT, t_color );
;PCODE: $000009C9 VOL: 0
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
;PCODE: $000009CC VOL: 0
;PCODE: $000009CD VOL: 0
;PCODE: $000009CE VOL: 0
;PCODE: $000009CF VOL: 0
;PCODE: $000009D0 VOL: 0
;PCODE: $000009D1 VOL: 0
;PCODE: $000009D2 VOL: 0
;                    #endif
;                }
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
;PCODE: $000009D5 VOL: 0
;PCODE: $000009D6 VOL: 0
;PCODE: $000009D7 VOL: 0
;
;                switch (rot)
;PCODE: $000009D8 VOL: 0
;                {
;                    case 0:     x+=(5*zoom_height);
;PCODE: $000009D9 VOL: 0
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
;PCODE: $000009DE VOL: 0
;PCODE: $000009DF VOL: 0
;PCODE: $000009E0 VOL: 0
;                                break;
;PCODE: $000009E1 VOL: 0
;                    default:    y+=(5*zoom_height);
;PCODE: $000009E2 VOL: 0
;PCODE: $000009E3 VOL: 0
;PCODE: $000009E4 VOL: 0
;PCODE: $000009E5 VOL: 0
;PCODE: $000009E6 VOL: 0
;PCODE: $000009E7 VOL: 0
;PCODE: $000009E8 VOL: 0
;                }
;PCODE: $000009E9 VOL: 0
;
;        }
;
;        else if (array[i]==0) //Нарисовать незакрашенную ячейку (5%)
;PCODE: $000009EA VOL: 0
;PCODE: $000009EB VOL: 0
;PCODE: $000009EC VOL: 0
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
;PCODE: $000009F1 VOL: 0
;PCODE: $000009F2 VOL: 0
;        {
;                switch (rot)
;PCODE: $000009F3 VOL: 0
;                {
;                    case 0:     SetArea (x, x+(5*zoom_height-1), y, y+(width-1));
;PCODE: $000009F4 VOL: 0
;PCODE: $000009F5 VOL: 0
;PCODE: $000009F6 VOL: 0
;PCODE: $000009F7 VOL: 0
;PCODE: $000009F8 VOL: 0
;PCODE: $000009F9 VOL: 0
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
;PCODE: $000009FC VOL: 0
;PCODE: $000009FD VOL: 0
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
;PCODE: $00000A00 VOL: 0
;PCODE: $00000A01 VOL: 0
;PCODE: $00000A02 VOL: 0
;PCODE: $00000A03 VOL: 0
;PCODE: $00000A04 VOL: 0
;PCODE: $00000A05 VOL: 0
;                                break;
;PCODE: $00000A06 VOL: 0
;                    default:    SetArea (x, x+(width-1), y, y+(5*zoom_height-1));
;PCODE: $00000A07 VOL: 0
;PCODE: $00000A08 VOL: 0
;PCODE: $00000A09 VOL: 0
;PCODE: $00000A0A VOL: 0
;PCODE: $00000A0B VOL: 0
;PCODE: $00000A0C VOL: 0
;PCODE: $00000A0D VOL: 0
;PCODE: $00000A0E VOL: 0
;PCODE: $00000A0F VOL: 0
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
;PCODE: $00000A12 VOL: 0
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
;PCODE: $00000A15 VOL: 0
;PCODE: $00000A16 VOL: 0
;PCODE: $00000A17 VOL: 0
;                }
;PCODE: $00000A18 VOL: 0
;
;                for(j = 0; j < width*(5*zoom_height); j++)
;PCODE: $00000A19 VOL: 0
;PCODE: $00000A1A VOL: 0
;PCODE: $00000A1B VOL: 0
;PCODE: $00000A1C VOL: 0
;PCODE: $00000A1D VOL: 0
;PCODE: $00000A1E VOL: 0
;PCODE: $00000A1F VOL: 0
;PCODE: $00000A20 VOL: 0
;PCODE: $00000A21 VOL: 0
;PCODE: $00000A22 VOL: 0
;PCODE: $00000A23 VOL: 0
;PCODE: $00000A24 VOL: 0
;PCODE: $00000A25 VOL: 0
;PCODE: $00000A26 VOL: 0
;PCODE: $00000A27 VOL: 0
;PCODE: $00000A28 VOL: 0
;PCODE: $00000A29 VOL: 0
;PCODE: $00000A2A VOL: 0
;                {
;                    #ifdef _8_BIT_COLOR		//(8-ми битовая цветовая палитра (256 цветов))
;                    Send_to_lcd( DAT, b_color ); //Данные - задаём цвет пикселя
;                    #else			        //(16-ти битовая цветовая палитра (65536 цветов))
;                    Send_to_lcd( DAT, (b_color >> 8) ); Send_to_lcd( DAT, b_color );
;PCODE: $00000A2B VOL: 0
;PCODE: $00000A2C VOL: 0
;PCODE: $00000A2D VOL: 0
;PCODE: $00000A2E VOL: 0
;PCODE: $00000A2F VOL: 0
;PCODE: $00000A30 VOL: 0
;PCODE: $00000A31 VOL: 0
;PCODE: $00000A32 VOL: 0
;PCODE: $00000A33 VOL: 0
;PCODE: $00000A34 VOL: 0
;                    #endif
;                }
;PCODE: $00000A35 VOL: 0
;PCODE: $00000A36 VOL: 0
;PCODE: $00000A37 VOL: 0
;PCODE: $00000A38 VOL: 0
;PCODE: $00000A39 VOL: 0
;                 switch (rot)
;PCODE: $00000A3A VOL: 0
;                {
;                    case 0:     x+=(5*zoom_height);
;PCODE: $00000A3B VOL: 0
;PCODE: $00000A3C VOL: 0
;PCODE: $00000A3D VOL: 0
;PCODE: $00000A3E VOL: 0
;PCODE: $00000A3F VOL: 0
;PCODE: $00000A40 VOL: 0
;PCODE: $00000A41 VOL: 0
;PCODE: $00000A42 VOL: 0
;                                break;
;PCODE: $00000A43 VOL: 0
;                    default:    y+=(5*zoom_height);
;PCODE: $00000A44 VOL: 0
;PCODE: $00000A45 VOL: 0
;PCODE: $00000A46 VOL: 0
;PCODE: $00000A47 VOL: 0
;PCODE: $00000A48 VOL: 0
;PCODE: $00000A49 VOL: 0
;PCODE: $00000A4A VOL: 0
;                }
;PCODE: $00000A4B VOL: 0
;        }
;
;        else  //Нарисовать полузакрашенную ячейку (1-4%)
;PCODE: $00000A4C VOL: 0
;PCODE: $00000A4D VOL: 0
;        {
;            m=array[i];
;PCODE: $00000A4E VOL: 0
;PCODE: $00000A4F VOL: 0
;PCODE: $00000A50 VOL: 0
;PCODE: $00000A51 VOL: 0
;PCODE: $00000A52 VOL: 0
;            while (m--)
;PCODE: $00000A53 VOL: 0
;PCODE: $00000A54 VOL: 0
;PCODE: $00000A55 VOL: 0
;PCODE: $00000A56 VOL: 0
;PCODE: $00000A57 VOL: 0
;PCODE: $00000A58 VOL: 0
;            {
;
;                switch (rot)
;PCODE: $00000A59 VOL: 0
;                {
;                    case 0:     SetArea (x, x+(zoom_height-1), y, y+(width-1));
;PCODE: $00000A5A VOL: 0
;PCODE: $00000A5B VOL: 0
;PCODE: $00000A5C VOL: 0
;PCODE: $00000A5D VOL: 0
;PCODE: $00000A5E VOL: 0
;PCODE: $00000A5F VOL: 0
;PCODE: $00000A60 VOL: 0
;PCODE: $00000A61 VOL: 0
;PCODE: $00000A62 VOL: 0
;PCODE: $00000A63 VOL: 0
;PCODE: $00000A64 VOL: 0
;PCODE: $00000A65 VOL: 0
;PCODE: $00000A66 VOL: 0
;PCODE: $00000A67 VOL: 0
;PCODE: $00000A68 VOL: 0
;PCODE: $00000A69 VOL: 0
;                                break;
;PCODE: $00000A6A VOL: 0
;                    default:    SetArea (x, x+(width-1), y, y+(zoom_height-1));
;PCODE: $00000A6B VOL: 0
;PCODE: $00000A6C VOL: 0
;PCODE: $00000A6D VOL: 0
;PCODE: $00000A6E VOL: 0
;PCODE: $00000A6F VOL: 0
;PCODE: $00000A70 VOL: 0
;PCODE: $00000A71 VOL: 0
;PCODE: $00000A72 VOL: 0
;PCODE: $00000A73 VOL: 0
;PCODE: $00000A74 VOL: 0
;PCODE: $00000A75 VOL: 0
;PCODE: $00000A76 VOL: 0
;PCODE: $00000A77 VOL: 0
;PCODE: $00000A78 VOL: 0
;PCODE: $00000A79 VOL: 0
;                }
;PCODE: $00000A7A VOL: 0
;
;                for(j = 0; j < width*zoom_height; j++)
;PCODE: $00000A7B VOL: 0
;PCODE: $00000A7C VOL: 0
;PCODE: $00000A7D VOL: 0
;PCODE: $00000A7E VOL: 0
;PCODE: $00000A7F VOL: 0
;PCODE: $00000A80 VOL: 0
;PCODE: $00000A81 VOL: 0
;PCODE: $00000A82 VOL: 0
;PCODE: $00000A83 VOL: 0
;PCODE: $00000A84 VOL: 0
;PCODE: $00000A85 VOL: 0
;PCODE: $00000A86 VOL: 0
;PCODE: $00000A87 VOL: 0
;PCODE: $00000A88 VOL: 0
;PCODE: $00000A89 VOL: 0
;                {
;                    #ifdef _8_BIT_COLOR	//(8-ми битовая цветовая палитра (256 цветов))
;                    Send_to_lcd( DAT, t_color ); //Данные - задаём цвет пикселя
;                    #else			        //(16-ти битовая цветовая палитра (65536 цветов))
;                    Send_to_lcd( DAT, (t_color >> 8) ); Send_to_lcd( DAT, t_color );
;PCODE: $00000A8A VOL: 0
;PCODE: $00000A8B VOL: 0
;PCODE: $00000A8C VOL: 0
;PCODE: $00000A8D VOL: 0
;PCODE: $00000A8E VOL: 0
;PCODE: $00000A8F VOL: 0
;PCODE: $00000A90 VOL: 0
;PCODE: $00000A91 VOL: 0
;PCODE: $00000A92 VOL: 0
;PCODE: $00000A93 VOL: 0
;                    #endif
;                }
;PCODE: $00000A94 VOL: 0
;PCODE: $00000A95 VOL: 0
;PCODE: $00000A96 VOL: 0
;PCODE: $00000A97 VOL: 0
;PCODE: $00000A98 VOL: 0
;                     switch (rot)
;PCODE: $00000A99 VOL: 0
;                {
;                    case 0:     x+=zoom_height;
;PCODE: $00000A9A VOL: 0
;PCODE: $00000A9B VOL: 0
;PCODE: $00000A9C VOL: 0
;PCODE: $00000A9D VOL: 0
;PCODE: $00000A9E VOL: 0
;PCODE: $00000A9F VOL: 0
;                                break;
;PCODE: $00000AA0 VOL: 0
;                    default:    y+=zoom_height;
;PCODE: $00000AA1 VOL: 0
;PCODE: $00000AA2 VOL: 0
;PCODE: $00000AA3 VOL: 0
;PCODE: $00000AA4 VOL: 0
;PCODE: $00000AA5 VOL: 0
;                }
;PCODE: $00000AA6 VOL: 0
;            }
;PCODE: $00000AA7 VOL: 0
;PCODE: $00000AA8 VOL: 0
;
;            m=5-array[i];
;PCODE: $00000AA9 VOL: 0
;PCODE: $00000AAA VOL: 0
;PCODE: $00000AAB VOL: 0
;PCODE: $00000AAC VOL: 0
;PCODE: $00000AAD VOL: 0
;PCODE: $00000AAE VOL: 0
;PCODE: $00000AAF VOL: 0
;PCODE: $00000AB0 VOL: 0
;            while (m--)
;PCODE: $00000AB1 VOL: 0
;PCODE: $00000AB2 VOL: 0
;PCODE: $00000AB3 VOL: 0
;PCODE: $00000AB4 VOL: 0
;PCODE: $00000AB5 VOL: 0
;PCODE: $00000AB6 VOL: 0
;            {
;                switch (rot)
;PCODE: $00000AB7 VOL: 0
;                {
;                    case 0:     SetArea (x, x+(zoom_height-1), y, y+(width-1));
;PCODE: $00000AB8 VOL: 0
;PCODE: $00000AB9 VOL: 0
;PCODE: $00000ABA VOL: 0
;PCODE: $00000ABB VOL: 0
;PCODE: $00000ABC VOL: 0
;PCODE: $00000ABD VOL: 0
;PCODE: $00000ABE VOL: 0
;PCODE: $00000ABF VOL: 0
;PCODE: $00000AC0 VOL: 0
;PCODE: $00000AC1 VOL: 0
;PCODE: $00000AC2 VOL: 0
;PCODE: $00000AC3 VOL: 0
;PCODE: $00000AC4 VOL: 0
;PCODE: $00000AC5 VOL: 0
;PCODE: $00000AC6 VOL: 0
;PCODE: $00000AC7 VOL: 0
;                                break;
;PCODE: $00000AC8 VOL: 0
;                    default:    SetArea (x, x+(width-1), y, y+(zoom_height-1));
;PCODE: $00000AC9 VOL: 0
;PCODE: $00000ACA VOL: 0
;PCODE: $00000ACB VOL: 0
;PCODE: $00000ACC VOL: 0
;PCODE: $00000ACD VOL: 0
;PCODE: $00000ACE VOL: 0
;PCODE: $00000ACF VOL: 0
;PCODE: $00000AD0 VOL: 0
;PCODE: $00000AD1 VOL: 0
;PCODE: $00000AD2 VOL: 0
;PCODE: $00000AD3 VOL: 0
;PCODE: $00000AD4 VOL: 0
;PCODE: $00000AD5 VOL: 0
;PCODE: $00000AD6 VOL: 0
;PCODE: $00000AD7 VOL: 0
;                }
;PCODE: $00000AD8 VOL: 0
;
;                for(j = 0; j < width*zoom_height; j++)
;PCODE: $00000AD9 VOL: 0
;PCODE: $00000ADA VOL: 0
;PCODE: $00000ADB VOL: 0
;PCODE: $00000ADC VOL: 0
;PCODE: $00000ADD VOL: 0
;PCODE: $00000ADE VOL: 0
;PCODE: $00000ADF VOL: 0
;PCODE: $00000AE0 VOL: 0
;PCODE: $00000AE1 VOL: 0
;PCODE: $00000AE2 VOL: 0
;PCODE: $00000AE3 VOL: 0
;PCODE: $00000AE4 VOL: 0
;PCODE: $00000AE5 VOL: 0
;PCODE: $00000AE6 VOL: 0
;PCODE: $00000AE7 VOL: 0
;                {
;                    #ifdef _8_BIT_COLOR	//(8-ми битовая цветовая палитра (256 цветов))
;                    Send_to_lcd( DAT, b_color ); //Данные - задаём цвет пикселя
;                    #else			        //(16-ти битовая цветовая палитра (65536 цветов))
;                    Send_to_lcd( DAT, (b_color >> 8) ); Send_to_lcd( DAT, b_color );
;PCODE: $00000AE8 VOL: 0
;PCODE: $00000AE9 VOL: 0
;PCODE: $00000AEA VOL: 0
;PCODE: $00000AEB VOL: 0
;PCODE: $00000AEC VOL: 0
;PCODE: $00000AED VOL: 0
;PCODE: $00000AEE VOL: 0
;PCODE: $00000AEF VOL: 0
;PCODE: $00000AF0 VOL: 0
;PCODE: $00000AF1 VOL: 0
;                    #endif
;                }
;PCODE: $00000AF2 VOL: 0
;PCODE: $00000AF3 VOL: 0
;PCODE: $00000AF4 VOL: 0
;PCODE: $00000AF5 VOL: 0
;PCODE: $00000AF6 VOL: 0
;                     switch (rot)
;PCODE: $00000AF7 VOL: 0
;                switch (rot)
;PCODE: $00000AF8 VOL: 0
;                {
;                    case 0:     x+=zoom_height;
;PCODE: $00000AF9 VOL: 0
;PCODE: $00000AFA VOL: 0
;PCODE: $00000AFB VOL: 0
;PCODE: $00000AFC VOL: 0
;PCODE: $00000AFD VOL: 0
;PCODE: $00000AFE VOL: 0
;                                break;
;PCODE: $00000AFF VOL: 0
;                    default:    y+=zoom_height;
;PCODE: $00000B00 VOL: 0
;PCODE: $00000B01 VOL: 0
;PCODE: $00000B02 VOL: 0
;PCODE: $00000B03 VOL: 0
;PCODE: $00000B04 VOL: 0
;                }
;PCODE: $00000B05 VOL: 0
;PCODE: $00000B06 VOL: 0
;            }
;PCODE: $00000B07 VOL: 0
;PCODE: $00000B08 VOL: 0
;        }
;PCODE: $00000B09 VOL: 0
;PCODE: $00000B0A VOL: 0
;
;    }
;PCODE: $00000B0B VOL: 0
;PCODE: $00000B0C VOL: 0
;PCODE: $00000B0D VOL: 0
;PCODE: $00000B0E VOL: 0
;PCODE: $00000B0F VOL: 0
;    Send_to_lcd(CMD, 0x36);
;PCODE: $00000B10 VOL: 0
;PCODE: $00000B11 VOL: 0
;PCODE: $00000B12 VOL: 0
;PCODE: $00000B13 VOL: 0
;    Send_to_lcd(DAT, 0x00); //Начальный адрес осей Х и У - левый верхний угол дисплея
;PCODE: $00000B14 VOL: 0
;PCODE: $00000B15 VOL: 0
;PCODE: $00000B16 VOL: 0
;PCODE: $00000B17 VOL: 0
;}
;PCODE: $00000B18 VOL: 0
;PCODE: $00000B19 VOL: 0
;PCODE: $00000B1A VOL: 0
;PCODE: $00000B1B VOL: 0
;
;//===============================================================
;#endif //_GEOMETRICAL
;#include <stdio.h>
;
;void set_air_cur_temp(int temp);
;
;#include "pidlib.h"
;/*! \brief Initialisation of PID controller parameters.
; *
; *  Initialise the variables used by the PID algorithm.
; *
; *  \param p_factor  Proportional term.
; *  \param i_factor  Integral term.
; *  \param d_factor  Derivate term.
; *  \param pid  Struct with PID status.
; */
;void pid_Init(signed int p_factor, signed int i_factor, signed int d_factor, struct PID_DATA *pid)
; 0000 0054 // Set up PID controller parameters
;{
;PCODE: $00000B1C VOL: 0
;PCODE: $00000B1D VOL: 0
;  // Start values for PID controller
;  pid->sumError = 0;
;PCODE: $00000B1E VOL: 0
;	p_factor -> Y+6
;	i_factor -> Y+4
;	d_factor -> Y+2
;	*pid -> Y+0
;PCODE: $00000B1F VOL: 0
;PCODE: $00000B20 VOL: 0
;PCODE: $00000B21 VOL: 0
;PCODE: $00000B22 VOL: 0
;  pid->lastProcessValue = 0;
;PCODE: $00000B23 VOL: 0
;PCODE: $00000B24 VOL: 0
;PCODE: $00000B25 VOL: 0
;  // Tuning constants for PID loop
;  pid->P_Factor = p_factor;
;PCODE: $00000B26 VOL: 0
;PCODE: $00000B27 VOL: 0
;PCODE: $00000B28 VOL: 0
;  pid->I_Factor = i_factor;
;PCODE: $00000B29 VOL: 0
;PCODE: $00000B2A VOL: 0
;PCODE: $00000B2B VOL: 0
;  pid->D_Factor = d_factor;
;PCODE: $00000B2C VOL: 0
;PCODE: $00000B2D VOL: 0
;PCODE: $00000B2E VOL: 0
;  // Limits to avoid overflow
;  pid->maxError = MAX_INT / (pid->P_Factor + 1);
;PCODE: $00000B2F VOL: 0
;PCODE: $00000B30 VOL: 0
;PCODE: $00000B31 VOL: 0
;PCODE: $00000B32 VOL: 0
;PCODE: $00000B33 VOL: 0
;PCODE: $00000B34 VOL: 0
;PCODE: $00000B35 VOL: 0
;PCODE: $00000B36 VOL: 0
;  pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
;PCODE: $00000B37 VOL: 0
;PCODE: $00000B38 VOL: 0
;PCODE: $00000B39 VOL: 0
;PCODE: $00000B3A VOL: 0
;PCODE: $00000B3B VOL: 0
;PCODE: $00000B3C VOL: 0
;PCODE: $00000B3D VOL: 0
;PCODE: $00000B3E VOL: 0
;PCODE: $00000B3F VOL: 0
;
;}
;PCODE: $00000B40 VOL: 0
;PCODE: $00000B41 VOL: 0
;PCODE: $00000B42 VOL: 0
;
;
;/*! \brief PID control algorithm.
; *
; *  Calculates output from setpoint, process value and PID status.
; *
; *  \param setPoint  Desired value.
; *  \param processValue  Measured value.
; *  \param pid_st  PID status struct.
; */
;signed int pid_Controller(signed int setPoint, signed int processValue, struct PID_DATA *pid_st)
;{
;PCODE: $00000B43 VOL: 0
;PCODE: $00000B44 VOL: 0
;  signed int error, p_term, d_term;
;  signed long i_term, ret, temp;
;
;  error = setPoint - processValue;
;PCODE: $00000B45 VOL: 0
;PCODE: $00000B46 VOL: 0
;PCODE: $00000B47 VOL: 0
;	setPoint -> Y+22
;	processValue -> Y+20
;	*pid_st -> Y+18
;	error -> R16,R17
;	p_term -> R18,R19
;	d_term -> R20,R21
;	i_term -> Y+14
;	ret -> Y+10
;	temp -> Y+6
;PCODE: $00000B48 VOL: 0
;PCODE: $00000B49 VOL: 0
;PCODE: $00000B4A VOL: 0
;PCODE: $00000B4B VOL: 0
;
;  // Calculate Pterm and limit error overflow
;  if (error > pid_st->maxError){
;PCODE: $00000B4C VOL: 0
;PCODE: $00000B4D VOL: 0
;PCODE: $00000B4E VOL: 0
;PCODE: $00000B4F VOL: 0
;PCODE: $00000B50 VOL: 0
;    p_term = MAX_INT;
;PCODE: $00000B51 VOL: 0
;PCODE: $00000B52 VOL: 0
;  }
;  else if (error < -pid_st->maxError){
;PCODE: $00000B53 VOL: 0
;PCODE: $00000B54 VOL: 0
;PCODE: $00000B55 VOL: 0
;PCODE: $00000B56 VOL: 0
;PCODE: $00000B57 VOL: 0
;PCODE: $00000B58 VOL: 0
;PCODE: $00000B59 VOL: 0
;PCODE: $00000B5A VOL: 0
;    p_term = -MAX_INT;
;PCODE: $00000B5B VOL: 0
;PCODE: $00000B5C VOL: 0
;  }
;  else{
;PCODE: $00000B5D VOL: 0
;PCODE: $00000B5E VOL: 0
;    p_term = pid_st->P_Factor * error;
;PCODE: $00000B5F VOL: 0
;PCODE: $00000B60 VOL: 0
;PCODE: $00000B61 VOL: 0
;PCODE: $00000B62 VOL: 0
;PCODE: $00000B63 VOL: 0
;  }
;PCODE: $00000B64 VOL: 0
;PCODE: $00000B65 VOL: 0
;
;  // Calculate Iterm and limit integral runaway
;  temp = pid_st->sumError + error;
;PCODE: $00000B66 VOL: 0
;PCODE: $00000B67 VOL: 0
;PCODE: $00000B68 VOL: 0
;PCODE: $00000B69 VOL: 0
;PCODE: $00000B6A VOL: 0
;PCODE: $00000B6B VOL: 0
;
;  if(temp > pid_st->maxSumError){
;PCODE: $00000B6C VOL: 0
;PCODE: $00000B6D VOL: 0
;PCODE: $00000B6E VOL: 0
;PCODE: $00000B6F VOL: 0
;PCODE: $00000B70 VOL: 0
;PCODE: $00000B71 VOL: 0
;    i_term = MAX_I_TERM;
;PCODE: $00000B72 VOL: 0
;PCODE: $00000B73 VOL: 0
;    pid_st->sumError = pid_st->maxSumError;
;PCODE: $00000B74 VOL: 0
;PCODE: $00000B75 VOL: 0
;PCODE: $00000B76 VOL: 0
;PCODE: $00000B77 VOL: 0
;PCODE: $00000B78 VOL: 0
;  }
;  else if(temp < -pid_st->maxSumError){
;PCODE: $00000B79 VOL: 0
;PCODE: $00000B7A VOL: 0
;PCODE: $00000B7B VOL: 0
;PCODE: $00000B7C VOL: 0
;PCODE: $00000B7D VOL: 0
;PCODE: $00000B7E VOL: 0
;PCODE: $00000B7F VOL: 0
;PCODE: $00000B80 VOL: 0
;PCODE: $00000B81 VOL: 0
;    i_term = -MAX_I_TERM;
;PCODE: $00000B82 VOL: 0
;PCODE: $00000B83 VOL: 0
;    pid_st->sumError = -pid_st->maxSumError;
;PCODE: $00000B84 VOL: 0
;PCODE: $00000B85 VOL: 0
;PCODE: $00000B86 VOL: 0
;PCODE: $00000B87 VOL: 0
;PCODE: $00000B88 VOL: 0
;PCODE: $00000B89 VOL: 0
;  }
;  else{
;PCODE: $00000B8A VOL: 0
;PCODE: $00000B8B VOL: 0
;    pid_st->sumError = temp;
;PCODE: $00000B8C VOL: 0
;PCODE: $00000B8D VOL: 0
;PCODE: $00000B8E VOL: 0
;    i_term = pid_st->I_Factor * pid_st->sumError;
;PCODE: $00000B8F VOL: 0
;PCODE: $00000B90 VOL: 0
;PCODE: $00000B91 VOL: 0
;PCODE: $00000B92 VOL: 0
;PCODE: $00000B93 VOL: 0
;PCODE: $00000B94 VOL: 0
;PCODE: $00000B95 VOL: 0
;PCODE: $00000B96 VOL: 0
;PCODE: $00000B97 VOL: 0
;PCODE: $00000B98 VOL: 0
;  }
;PCODE: $00000B99 VOL: 0
;PCODE: $00000B9A VOL: 0
;
;  // Calculate Dterm
;  d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue);
;PCODE: $00000B9B VOL: 0
;PCODE: $00000B9C VOL: 0
;PCODE: $00000B9D VOL: 0
;PCODE: $00000B9E VOL: 0
;PCODE: $00000B9F VOL: 0
;PCODE: $00000BA0 VOL: 0
;PCODE: $00000BA1 VOL: 0
;PCODE: $00000BA2 VOL: 0
;PCODE: $00000BA3 VOL: 0
;PCODE: $00000BA4 VOL: 0
;
;  pid_st->lastProcessValue = processValue;
;PCODE: $00000BA5 VOL: 0
;PCODE: $00000BA6 VOL: 0
;PCODE: $00000BA7 VOL: 0
;  ret = (p_term + i_term + d_term) / SCALING_FACTOR;
;PCODE: $00000BA8 VOL: 0
;PCODE: $00000BA9 VOL: 0
;PCODE: $00000BAA VOL: 0
;PCODE: $00000BAB VOL: 0
;PCODE: $00000BAC VOL: 0
;PCODE: $00000BAD VOL: 0
;PCODE: $00000BAE VOL: 0
;PCODE: $00000BAF VOL: 0
;PCODE: $00000BB0 VOL: 0
;PCODE: $00000BB1 VOL: 0
;  if(ret > MAX_INT){
;PCODE: $00000BB2 VOL: 0
;PCODE: $00000BB3 VOL: 0
;PCODE: $00000BB4 VOL: 0
;    ret = MAX_INT;
;PCODE: $00000BB5 VOL: 0
;PCODE: $00000BB6 VOL: 0
;  }
;  else if(ret < -MAX_INT){
;PCODE: $00000BB7 VOL: 0
;PCODE: $00000BB8 VOL: 0
;PCODE: $00000BB9 VOL: 0
;PCODE: $00000BBA VOL: 0
;PCODE: $00000BBB VOL: 0
;    ret = -MAX_INT;
;PCODE: $00000BBC VOL: 0
;PCODE: $00000BBD VOL: 0
;  }
;
;  return((signed int)ret);
;PCODE: $00000BBE VOL: 0
;PCODE: $00000BBF VOL: 0
;PCODE: $00000BC0 VOL: 0
;PCODE: $00000BC1 VOL: 0
;PCODE: $00000BC2 VOL: 0
;PCODE: $00000BC3 VOL: 0
;}
;PCODE: $00000BC4 VOL: 0
;
;/*! \brief Resets the integrator.
; *
; *  Calling this function will reset the integrator in the PID regulator.
; */
;void pid_Reset_Integrator(pidData_t *pid_st)
;{
;PCODE: $00000BC5 VOL: 0
;PCODE: $00000BC6 VOL: 0
;  pid_st->sumError = 0;
;PCODE: $00000BC7 VOL: 0
;	*pid_st -> Y+0
;PCODE: $00000BC8 VOL: 0
;PCODE: $00000BC9 VOL: 0
;PCODE: $00000BCA VOL: 0
;PCODE: $00000BCB VOL: 0
;}
;PCODE: $00000BCC VOL: 0
;PCODE: $00000BCD VOL: 0
;PCODE: $00000BCE VOL: 0
;
;unsigned int read_adc(unsigned char adc_input);
;void process_butt(void);
;void process_sys(void);
;
;int solder_cur=0;
;int air_cur=0;
;int solder_set=0;
;int air_set=0;
;int fan_set=0;
;
;int solder_power=0;
;
;bit solder_on=0;
;bit air_on=0;
;
;struct PID_DATA pidData1;
;
;char sys_tmr=0;
;bit old_but_sold=0;
;
;void Init_pid(void) // Ініціалізація ПІД
; 0000 006B {
;PCODE: $00000BCF VOL: 0
;PCODE: $00000BD0 VOL: 0
; 0000 006C     pid_Init(K_P * SCALING_FACTOR, K_I * SCALING_FACTOR , K_D * SCALING_FACTOR , &pidData1);
;PCODE: $00000BD1 VOL: 0
;PCODE: $00000BD2 VOL: 0
;PCODE: $00000BD3 VOL: 0
;PCODE: $00000BD4 VOL: 0
;PCODE: $00000BD5 VOL: 0
;PCODE: $00000BD6 VOL: 0
;PCODE: $00000BD7 VOL: 0
;PCODE: $00000BD8 VOL: 0
; 0000 006D }
;PCODE: $00000BD9 VOL: 0
;PCODE: $00000BDA VOL: 0
;
;long map(long x, long in_min, long in_max, long out_min, long out_max)
; 0000 0070 {
;PCODE: $00000BDB VOL: 0
;PCODE: $00000BDC VOL: 0
; 0000 0071   return (((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min)/5)*5;
;PCODE: $00000BDD VOL: 0
;	x -> Y+16
;	in_min -> Y+12
;	in_max -> Y+8
;	out_min -> Y+4
;	out_max -> Y+0
;PCODE: $00000BDE VOL: 0
;PCODE: $00000BDF VOL: 0
;PCODE: $00000BE0 VOL: 0
;PCODE: $00000BE1 VOL: 0
;PCODE: $00000BE2 VOL: 0
;PCODE: $00000BE3 VOL: 0
;PCODE: $00000BE4 VOL: 0
;PCODE: $00000BE5 VOL: 0
;PCODE: $00000BE6 VOL: 0
;PCODE: $00000BE7 VOL: 0
;PCODE: $00000BE8 VOL: 0
;PCODE: $00000BE9 VOL: 0
;PCODE: $00000BEA VOL: 0
;PCODE: $00000BEB VOL: 0
;PCODE: $00000BEC VOL: 0
;PCODE: $00000BED VOL: 0
;PCODE: $00000BEE VOL: 0
;PCODE: $00000BEF VOL: 0
;PCODE: $00000BF0 VOL: 0
;PCODE: $00000BF1 VOL: 0
;PCODE: $00000BF2 VOL: 0
;PCODE: $00000BF3 VOL: 0
;PCODE: $00000BF4 VOL: 0
; 0000 0072 }
;PCODE: $00000BF5 VOL: 0
;void draw_2bit_image(char x, char y, char width, char height,int color,int bg, flash char *img)
; 0000 0074 {
;PCODE: $00000BF6 VOL: 0
;PCODE: $00000BF7 VOL: 0
; 0000 0075   char xc,yc,dn=0;
; 0000 0076   for(yc=y; yc<(y+height); yc++)
;PCODE: $00000BF8 VOL: 0
;PCODE: $00000BF9 VOL: 0
;	x -> Y+13
;	y -> Y+12
;	width -> Y+11
;	height -> Y+10
;	color -> Y+8
;	bg -> Y+6
;	*img -> Y+4
;	xc -> R17
;	yc -> R16
;	dn -> R19
;PCODE: $00000BFA VOL: 0
;PCODE: $00000BFB VOL: 0
;PCODE: $00000BFC VOL: 0
;PCODE: $00000BFD VOL: 0
;PCODE: $00000BFE VOL: 0
;PCODE: $00000BFF VOL: 0
;PCODE: $00000C00 VOL: 0
;PCODE: $00000C01 VOL: 0
;PCODE: $00000C02 VOL: 0
;PCODE: $00000C03 VOL: 0
;PCODE: $00000C04 VOL: 0
;PCODE: $00000C05 VOL: 0
;PCODE: $00000C06 VOL: 0
;PCODE: $00000C07 VOL: 0
;PCODE: $00000C08 VOL: 0
;PCODE: $00000C09 VOL: 0
;PCODE: $00000C0A VOL: 0
; 0000 0077   {
; 0000 0078    for(xc=x; xc<x+width; )
;PCODE: $00000C0B VOL: 0
;PCODE: $00000C0C VOL: 0
;PCODE: $00000C0D VOL: 0
;PCODE: $00000C0E VOL: 0
;PCODE: $00000C0F VOL: 0
;PCODE: $00000C10 VOL: 0
;PCODE: $00000C11 VOL: 0
;PCODE: $00000C12 VOL: 0
;PCODE: $00000C13 VOL: 0
;PCODE: $00000C14 VOL: 0
;PCODE: $00000C15 VOL: 0
;PCODE: $00000C16 VOL: 0
;PCODE: $00000C17 VOL: 0
; 0000 0079    {
; 0000 007A     if ((img[dn] & 0B10000000)) {Put_Pixel(yc,xc++,color);} else {Put_Pixel(yc,xc++,bg);}
;PCODE: $00000C18 VOL: 0
;PCODE: $00000C19 VOL: 0
;PCODE: $00000C1A VOL: 0
;PCODE: $00000C1B VOL: 0
;PCODE: $00000C1C VOL: 0
;PCODE: $00000C1D VOL: 0
;PCODE: $00000C1E VOL: 0
;PCODE: $00000C1F VOL: 0
;PCODE: $00000C20 VOL: 0
;PCODE: $00000C21 VOL: 0
;PCODE: $00000C22 VOL: 0
;PCODE: $00000C23 VOL: 0
;PCODE: $00000C24 VOL: 0
;PCODE: $00000C25 VOL: 0
;PCODE: $00000C26 VOL: 0
;PCODE: $00000C27 VOL: 0
;PCODE: $00000C28 VOL: 0
;PCODE: $00000C29 VOL: 0
;PCODE: $00000C2A VOL: 0
;PCODE: $00000C2B VOL: 0
; 0000 007B     if ((img[dn] & 0B01000000)) {Put_Pixel(yc,xc++,color);} else {Put_Pixel(yc,xc++,bg);}
;PCODE: $00000C2C VOL: 0
;PCODE: $00000C2D VOL: 0
;PCODE: $00000C2E VOL: 0
;PCODE: $00000C2F VOL: 0
;PCODE: $00000C30 VOL: 0
;PCODE: $00000C31 VOL: 0
;PCODE: $00000C32 VOL: 0
;PCODE: $00000C33 VOL: 0
;PCODE: $00000C34 VOL: 0
;PCODE: $00000C35 VOL: 0
;PCODE: $00000C36 VOL: 0
;PCODE: $00000C37 VOL: 0
;PCODE: $00000C38 VOL: 0
;PCODE: $00000C39 VOL: 0
;PCODE: $00000C3A VOL: 0
;PCODE: $00000C3B VOL: 0
;PCODE: $00000C3C VOL: 0
;PCODE: $00000C3D VOL: 0
;PCODE: $00000C3E VOL: 0
;PCODE: $00000C3F VOL: 0
; 0000 007C     if ((img[dn] & 0B00100000)) {Put_Pixel(yc,xc++,color);} else {Put_Pixel(yc,xc++,bg);}
;PCODE: $00000C40 VOL: 0
;PCODE: $00000C41 VOL: 0
;PCODE: $00000C42 VOL: 0
;PCODE: $00000C43 VOL: 0
;PCODE: $00000C44 VOL: 0
;PCODE: $00000C45 VOL: 0
;PCODE: $00000C46 VOL: 0
;PCODE: $00000C47 VOL: 0
;PCODE: $00000C48 VOL: 0
;PCODE: $00000C49 VOL: 0
;PCODE: $00000C4A VOL: 0
;PCODE: $00000C4B VOL: 0
;PCODE: $00000C4C VOL: 0
;PCODE: $00000C4D VOL: 0
;PCODE: $00000C4E VOL: 0
;PCODE: $00000C4F VOL: 0
;PCODE: $00000C50 VOL: 0
;PCODE: $00000C51 VOL: 0
;PCODE: $00000C52 VOL: 0
;PCODE: $00000C53 VOL: 0
; 0000 007D     if ((img[dn] & 0B00010000)) {Put_Pixel(yc,xc++,color);} else {Put_Pixel(yc,xc++,bg);}
;PCODE: $00000C54 VOL: 0
;PCODE: $00000C55 VOL: 0
;PCODE: $00000C56 VOL: 0
;PCODE: $00000C57 VOL: 0
;PCODE: $00000C58 VOL: 0
;PCODE: $00000C59 VOL: 0
;PCODE: $00000C5A VOL: 0
;PCODE: $00000C5B VOL: 0
;PCODE: $00000C5C VOL: 0
;PCODE: $00000C5D VOL: 0
;PCODE: $00000C5E VOL: 0
;PCODE: $00000C5F VOL: 0
;PCODE: $00000C60 VOL: 0
;PCODE: $00000C61 VOL: 0
;PCODE: $00000C62 VOL: 0
;PCODE: $00000C63 VOL: 0
;PCODE: $00000C64 VOL: 0
;PCODE: $00000C65 VOL: 0
;PCODE: $00000C66 VOL: 0
;PCODE: $00000C67 VOL: 0
; 0000 007E     if ((img[dn] & 0B00001000))  {Put_Pixel(yc,xc++,color);} else {Put_Pixel(yc,xc++,bg);}
;PCODE: $00000C68 VOL: 0
;PCODE: $00000C69 VOL: 0
;PCODE: $00000C6A VOL: 0
;PCODE: $00000C6B VOL: 0
;PCODE: $00000C6C VOL: 0
;PCODE: $00000C6D VOL: 0
;PCODE: $00000C6E VOL: 0
;PCODE: $00000C6F VOL: 0
;PCODE: $00000C70 VOL: 0
;PCODE: $00000C71 VOL: 0
;PCODE: $00000C72 VOL: 0
;PCODE: $00000C73 VOL: 0
;PCODE: $00000C74 VOL: 0
;PCODE: $00000C75 VOL: 0
;PCODE: $00000C76 VOL: 0
;PCODE: $00000C77 VOL: 0
;PCODE: $00000C78 VOL: 0
;PCODE: $00000C79 VOL: 0
;PCODE: $00000C7A VOL: 0
;PCODE: $00000C7B VOL: 0
; 0000 007F     if ((img[dn] & 0B00000100))  {Put_Pixel(yc,xc++,color);} else {Put_Pixel(yc,xc++,bg);}
;PCODE: $00000C7C VOL: 0
;PCODE: $00000C7D VOL: 0
;PCODE: $00000C7E VOL: 0
;PCODE: $00000C7F VOL: 0
;PCODE: $00000C80 VOL: 0
;PCODE: $00000C81 VOL: 0
;PCODE: $00000C82 VOL: 0
;PCODE: $00000C83 VOL: 0
;PCODE: $00000C84 VOL: 0
;PCODE: $00000C85 VOL: 0
;PCODE: $00000C86 VOL: 0
;PCODE: $00000C87 VOL: 0
;PCODE: $00000C88 VOL: 0
;PCODE: $00000C89 VOL: 0
;PCODE: $00000C8A VOL: 0
;PCODE: $00000C8B VOL: 0
;PCODE: $00000C8C VOL: 0
;PCODE: $00000C8D VOL: 0
;PCODE: $00000C8E VOL: 0
;PCODE: $00000C8F VOL: 0
; 0000 0080     if ((img[dn] & 0B00000010))  {Put_Pixel(yc,xc++,color);} else {Put_Pixel(yc,xc++,bg);}
;PCODE: $00000C90 VOL: 0
;PCODE: $00000C91 VOL: 0
;PCODE: $00000C92 VOL: 0
;PCODE: $00000C93 VOL: 0
;PCODE: $00000C94 VOL: 0
;PCODE: $00000C95 VOL: 0
;PCODE: $00000C96 VOL: 0
;PCODE: $00000C97 VOL: 0
;PCODE: $00000C98 VOL: 0
;PCODE: $00000C99 VOL: 0
;PCODE: $00000C9A VOL: 0
;PCODE: $00000C9B VOL: 0
;PCODE: $00000C9C VOL: 0
;PCODE: $00000C9D VOL: 0
;PCODE: $00000C9E VOL: 0
;PCODE: $00000C9F VOL: 0
;PCODE: $00000CA0 VOL: 0
;PCODE: $00000CA1 VOL: 0
;PCODE: $00000CA2 VOL: 0
;PCODE: $00000CA3 VOL: 0
; 0000 0081     if ((img[dn] & 0B00000001))  {Put_Pixel(yc,xc++,color);} else {Put_Pixel(yc,xc++,bg);}
;PCODE: $00000CA4 VOL: 0
;PCODE: $00000CA5 VOL: 0
;PCODE: $00000CA6 VOL: 0
;PCODE: $00000CA7 VOL: 0
;PCODE: $00000CA8 VOL: 0
;PCODE: $00000CA9 VOL: 0
;PCODE: $00000CAA VOL: 0
;PCODE: $00000CAB VOL: 0
;PCODE: $00000CAC VOL: 0
;PCODE: $00000CAD VOL: 0
;PCODE: $00000CAE VOL: 0
;PCODE: $00000CAF VOL: 0
;PCODE: $00000CB0 VOL: 0
;PCODE: $00000CB1 VOL: 0
;PCODE: $00000CB2 VOL: 0
;PCODE: $00000CB3 VOL: 0
;PCODE: $00000CB4 VOL: 0
;PCODE: $00000CB5 VOL: 0
;PCODE: $00000CB6 VOL: 0
;PCODE: $00000CB7 VOL: 0
; 0000 0082     dn++;
;PCODE: $00000CB8 VOL: 0
;PCODE: $00000CB9 VOL: 0
; 0000 0083    }
;PCODE: $00000CBA VOL: 0
;PCODE: $00000CBB VOL: 0
;PCODE: $00000CBC VOL: 0
; 0000 0084   }
;PCODE: $00000CBD VOL: 0
;PCODE: $00000CBE VOL: 0
;PCODE: $00000CBF VOL: 0
;PCODE: $00000CC0 VOL: 0
;PCODE: $00000CC1 VOL: 0
; 0000 0085 }
;PCODE: $00000CC2 VOL: 0
;PCODE: $00000CC3 VOL: 0
;PCODE: $00000CC4 VOL: 0
;PCODE: $00000CC5 VOL: 0
;void set_sold_cur_temp(int temp)
; 0000 0087 {
;PCODE: $00000CC6 VOL: 0
;PCODE: $00000CC7 VOL: 0
; 0000 0088     char buf[5];
; 0000 0089     sprintf( buf,"%i  ",temp);
;PCODE: $00000CC8 VOL: 0
;PCODE: $00000CC9 VOL: 0
;	temp -> Y+5
;	buf -> Y+0
;PCODE: $00000CCA VOL: 0
;PCODE: $00000CCB VOL: 0
;PCODE: $00000CCC VOL: 0
;PCODE: $00000CCD VOL: 0
;PCODE: $00000CCE VOL: 0
;PCODE: $00000CCF VOL: 0
;PCODE: $00000CD0 VOL: 0
;PCODE: $00000CD1 VOL: 0
;PCODE: $00000CD2 VOL: 0
;PCODE: $00000CD3 VOL: 0
;PCODE: $00000CD4 VOL: 0
;PCODE: $00000CD5 VOL: 0
; 0000 008A     buf[3]=0;
;PCODE: $00000CD6 VOL: 0
;PCODE: $00000CD7 VOL: 0
; 0000 008B     LCD_Puts(buf,50,10,GREEN,WHITE,3,3);
;PCODE: $00000CD8 VOL: 0
;PCODE: $00000CD9 VOL: 0
;PCODE: $00000CDA VOL: 0
;PCODE: $00000CDB VOL: 0
;PCODE: $00000CDC VOL: 0
;PCODE: $00000CDD VOL: 0
;PCODE: $00000CDE VOL: 0
;PCODE: $00000CDF VOL: 0
;PCODE: $00000CE0 VOL: 0
;PCODE: $00000CE1 VOL: 0
;PCODE: $00000CE2 VOL: 0
;PCODE: $00000CE3 VOL: 0
;PCODE: $00000CE4 VOL: 0
;PCODE: $00000CE5 VOL: 0
; 0000 008C }
;PCODE: $00000CE6 VOL: 0
;PCODE: $00000CE7 VOL: 0
;PCODE: $00000CE8 VOL: 0
;
;void set_sold_temp(int temp)
; 0000 008F {
;PCODE: $00000CE9 VOL: 0
;PCODE: $00000CEA VOL: 0
; 0000 0090     char buf[1];
; 0000 0091     sprintf( buf,"%i  ",temp );
;PCODE: $00000CEB VOL: 0
;PCODE: $00000CEC VOL: 0
;	temp -> Y+1
;	buf -> Y+0
;PCODE: $00000CED VOL: 0
;PCODE: $00000CEE VOL: 0
;PCODE: $00000CEF VOL: 0
;PCODE: $00000CF0 VOL: 0
;PCODE: $00000CF1 VOL: 0
;PCODE: $00000CF2 VOL: 0
;PCODE: $00000CF3 VOL: 0
;PCODE: $00000CF4 VOL: 0
;PCODE: $00000CF5 VOL: 0
;PCODE: $00000CF6 VOL: 0
;PCODE: $00000CF7 VOL: 0
;PCODE: $00000CF8 VOL: 0
; 0000 0092     buf[3]=0;
;PCODE: $00000CF9 VOL: 0
;PCODE: $00000CFA VOL: 0
; 0000 0093     LCD_Puts(buf,122,10,RED,WHITE,3,3);
;PCODE: $00000CFB VOL: 0
;PCODE: $00000CFC VOL: 0
;PCODE: $00000CFD VOL: 0
;PCODE: $00000CFE VOL: 0
;PCODE: $00000CFF VOL: 0
;PCODE: $00000D00 VOL: 0
;PCODE: $00000D01 VOL: 0
;PCODE: $00000D02 VOL: 0
;PCODE: $00000D03 VOL: 0
;PCODE: $00000D04 VOL: 0
;PCODE: $00000D05 VOL: 0
;PCODE: $00000D06 VOL: 0
;PCODE: $00000D07 VOL: 0
;PCODE: $00000D08 VOL: 0
; 0000 0094 }
;PCODE: $00000D09 VOL: 0
;PCODE: $00000D0A VOL: 0
;PCODE: $00000D0B VOL: 0
;void set_air_cur_temp(int temp)
; 0000 0096 {
;PCODE: $00000D0C VOL: 0
;PCODE: $00000D0D VOL: 0
; 0000 0097     char buf[5];
; 0000 0098     sprintf( buf,"%i  ",temp );
;PCODE: $00000D0E VOL: 0
;PCODE: $00000D0F VOL: 0
;	temp -> Y+5
;	buf -> Y+0
;PCODE: $00000D10 VOL: 0
;PCODE: $00000D11 VOL: 0
;PCODE: $00000D12 VOL: 0
;PCODE: $00000D13 VOL: 0
;PCODE: $00000D14 VOL: 0
;PCODE: $00000D15 VOL: 0
;PCODE: $00000D16 VOL: 0
;PCODE: $00000D17 VOL: 0
;PCODE: $00000D18 VOL: 0
;PCODE: $00000D19 VOL: 0
;PCODE: $00000D1A VOL: 0
;PCODE: $00000D1B VOL: 0
; 0000 0099     buf[3]=0;
;PCODE: $00000D1C VOL: 0
;PCODE: $00000D1D VOL: 0
; 0000 009A     LCD_Puts(buf,50,50,GREEN,WHITE,3,3);
;PCODE: $00000D1E VOL: 0
;PCODE: $00000D1F VOL: 0
;PCODE: $00000D20 VOL: 0
;PCODE: $00000D21 VOL: 0
;PCODE: $00000D22 VOL: 0
;PCODE: $00000D23 VOL: 0
;PCODE: $00000D24 VOL: 0
;PCODE: $00000D25 VOL: 0
;PCODE: $00000D26 VOL: 0
;PCODE: $00000D27 VOL: 0
;PCODE: $00000D28 VOL: 0
;PCODE: $00000D29 VOL: 0
;PCODE: $00000D2A VOL: 0
;PCODE: $00000D2B VOL: 0
; 0000 009B }
;PCODE: $00000D2C VOL: 0
;PCODE: $00000D2D VOL: 0
;PCODE: $00000D2E VOL: 0
;
;void set_air_temp(int temp)
; 0000 009E {
;PCODE: $00000D2F VOL: 0
;PCODE: $00000D30 VOL: 0
; 0000 009F     char buf[5];
; 0000 00A0     sprintf( buf,"%i  ",temp);
;PCODE: $00000D31 VOL: 0
;PCODE: $00000D32 VOL: 0
;	temp -> Y+5
;	buf -> Y+0
;PCODE: $00000D33 VOL: 0
;PCODE: $00000D34 VOL: 0
;PCODE: $00000D35 VOL: 0
;PCODE: $00000D36 VOL: 0
;PCODE: $00000D37 VOL: 0
;PCODE: $00000D38 VOL: 0
;PCODE: $00000D39 VOL: 0
;PCODE: $00000D3A VOL: 0
;PCODE: $00000D3B VOL: 0
;PCODE: $00000D3C VOL: 0
;PCODE: $00000D3D VOL: 0
;PCODE: $00000D3E VOL: 0
; 0000 00A1     buf[3]=0;
;PCODE: $00000D3F VOL: 0
;PCODE: $00000D40 VOL: 0
; 0000 00A2     LCD_Puts(buf,122,50,RED,WHITE,3,3);
;PCODE: $00000D41 VOL: 0
;PCODE: $00000D42 VOL: 0
;PCODE: $00000D43 VOL: 0
;PCODE: $00000D44 VOL: 0
;PCODE: $00000D45 VOL: 0
;PCODE: $00000D46 VOL: 0
;PCODE: $00000D47 VOL: 0
;PCODE: $00000D48 VOL: 0
;PCODE: $00000D49 VOL: 0
;PCODE: $00000D4A VOL: 0
;PCODE: $00000D4B VOL: 0
;PCODE: $00000D4C VOL: 0
;PCODE: $00000D4D VOL: 0
;PCODE: $00000D4E VOL: 0
; 0000 00A3 }
;PCODE: $00000D4F VOL: 0
;PCODE: $00000D50 VOL: 0
;PCODE: $00000D51 VOL: 0
;void set_fan(int fan)
; 0000 00A5 {
;PCODE: $00000D52 VOL: 0
;PCODE: $00000D53 VOL: 0
; 0000 00A6     char buf[5];
; 0000 00A7     if (fan>4)
;PCODE: $00000D54 VOL: 0
;PCODE: $00000D55 VOL: 0
;	fan -> Y+5
;	buf -> Y+0
;PCODE: $00000D56 VOL: 0
;PCODE: $00000D57 VOL: 0
;PCODE: $00000D58 VOL: 0
; 0000 00A8     {
; 0000 00A9         fan_power= map(fan, 1, 100, 80, 255);
;PCODE: $00000D59 VOL: 0
;PCODE: $00000D5A VOL: 0
;PCODE: $00000D5B VOL: 0
;PCODE: $00000D5C VOL: 0
;PCODE: $00000D5D VOL: 0
;PCODE: $00000D5E VOL: 0
;PCODE: $00000D5F VOL: 0
;PCODE: $00000D60 VOL: 0
;PCODE: $00000D61 VOL: 0
;PCODE: $00000D62 VOL: 0
;PCODE: $00000D63 VOL: 0
;PCODE: $00000D64 VOL: 0
; 0000 00AA     }
; 0000 00AB     else
;PCODE: $00000D65 VOL: 0
;PCODE: $00000D66 VOL: 0
; 0000 00AC     {
; 0000 00AD          fan_power=0;
;PCODE: $00000D67 VOL: 0
;PCODE: $00000D68 VOL: 0
; 0000 00AE     }
;PCODE: $00000D69 VOL: 0
; 0000 00AF 
; 0000 00B0     sprintf( buf,"%i%%  ",fan );
;PCODE: $00000D6A VOL: 0
;PCODE: $00000D6B VOL: 0
;PCODE: $00000D6C VOL: 0
;PCODE: $00000D6D VOL: 0
;PCODE: $00000D6E VOL: 0
;PCODE: $00000D6F VOL: 0
;PCODE: $00000D70 VOL: 0
;PCODE: $00000D71 VOL: 0
;PCODE: $00000D72 VOL: 0
;PCODE: $00000D73 VOL: 0
;PCODE: $00000D74 VOL: 0
;PCODE: $00000D75 VOL: 0
; 0000 00B1     buf[4]=0;
;PCODE: $00000D76 VOL: 0
;PCODE: $00000D77 VOL: 0
; 0000 00B2     LCD_Puts(buf,50,90,BLACK,WHITE,3,3);
;PCODE: $00000D78 VOL: 0
;PCODE: $00000D79 VOL: 0
;PCODE: $00000D7A VOL: 0
;PCODE: $00000D7B VOL: 0
;PCODE: $00000D7C VOL: 0
;PCODE: $00000D7D VOL: 0
;PCODE: $00000D7E VOL: 0
;PCODE: $00000D7F VOL: 0
;PCODE: $00000D80 VOL: 0
;PCODE: $00000D81 VOL: 0
;PCODE: $00000D82 VOL: 0
;PCODE: $00000D83 VOL: 0
;PCODE: $00000D84 VOL: 0
;PCODE: $00000D85 VOL: 0
; 0000 00B3 
; 0000 00B4 }
;PCODE: $00000D86 VOL: 0
;PCODE: $00000D87 VOL: 0
;PCODE: $00000D88 VOL: 0
;void get_all_input(void)
; 0000 00B6 {
;PCODE: $00000D89 VOL: 0
;PCODE: $00000D8A VOL: 0
; 0000 00B7     solder_cur= map(read_adc(solder_TC), 0, 1023, 0, 480);
;PCODE: $00000D8B VOL: 0
;PCODE: $00000D8C VOL: 0
;PCODE: $00000D8D VOL: 0
;PCODE: $00000D8E VOL: 0
;PCODE: $00000D8F VOL: 0
;PCODE: $00000D90 VOL: 0
;PCODE: $00000D91 VOL: 0
;PCODE: $00000D92 VOL: 0
;PCODE: $00000D93 VOL: 0
;PCODE: $00000D94 VOL: 0
;PCODE: $00000D95 VOL: 0
;PCODE: $00000D96 VOL: 0
;PCODE: $00000D97 VOL: 0
; 0000 00B8     //solder_cur=read_adc(solder_TC)/10;
; 0000 00B9     air_cur= map(read_adc(air_TC), 0, 1023, 0, 480);
;PCODE: $00000D98 VOL: 0
;PCODE: $00000D99 VOL: 0
;PCODE: $00000D9A VOL: 0
;PCODE: $00000D9B VOL: 0
;PCODE: $00000D9C VOL: 0
;PCODE: $00000D9D VOL: 0
;PCODE: $00000D9E VOL: 0
;PCODE: $00000D9F VOL: 0
;PCODE: $00000DA0 VOL: 0
;PCODE: $00000DA1 VOL: 0
;PCODE: $00000DA2 VOL: 0
;PCODE: $00000DA3 VOL: 0
;PCODE: $00000DA4 VOL: 0
; 0000 00BA     solder_set= map(read_adc(solder_RR), 0, 1023, 0, 480);
;PCODE: $00000DA5 VOL: 0
;PCODE: $00000DA6 VOL: 0
;PCODE: $00000DA7 VOL: 0
;PCODE: $00000DA8 VOL: 0
;PCODE: $00000DA9 VOL: 0
;PCODE: $00000DAA VOL: 0
;PCODE: $00000DAB VOL: 0
;PCODE: $00000DAC VOL: 0
;PCODE: $00000DAD VOL: 0
;PCODE: $00000DAE VOL: 0
;PCODE: $00000DAF VOL: 0
;PCODE: $00000DB0 VOL: 0
;PCODE: $00000DB1 VOL: 0
; 0000 00BB     air_set= map(read_adc(air_RR), 0, 1023, 0, 480);
;PCODE: $00000DB2 VOL: 0
;PCODE: $00000DB3 VOL: 0
;PCODE: $00000DB4 VOL: 0
;PCODE: $00000DB5 VOL: 0
;PCODE: $00000DB6 VOL: 0
;PCODE: $00000DB7 VOL: 0
;PCODE: $00000DB8 VOL: 0
;PCODE: $00000DB9 VOL: 0
;PCODE: $00000DBA VOL: 0
;PCODE: $00000DBB VOL: 0
;PCODE: $00000DBC VOL: 0
;PCODE: $00000DBD VOL: 0
;PCODE: $00000DBE VOL: 0
; 0000 00BC     fan_set= map(read_adc(fan_RR), 0, 1023, 0, 100);
;PCODE: $00000DBF VOL: 0
;PCODE: $00000DC0 VOL: 0
;PCODE: $00000DC1 VOL: 0
;PCODE: $00000DC2 VOL: 0
;PCODE: $00000DC3 VOL: 0
;PCODE: $00000DC4 VOL: 0
;PCODE: $00000DC5 VOL: 0
;PCODE: $00000DC6 VOL: 0
;PCODE: $00000DC7 VOL: 0
;PCODE: $00000DC8 VOL: 0
;PCODE: $00000DC9 VOL: 0
;PCODE: $00000DCA VOL: 0
;PCODE: $00000DCB VOL: 0
; 0000 00BD 
; 0000 00BE }
;PCODE: $00000DCC VOL: 0
;PCODE: $00000DCD VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00C2 {
;PCODE: $00000DCE VOL: 0
;PCODE: $00000DCF VOL: 0
; 0000 00C3 // Place your code here
; 0000 00C4     sys_tmr++;
;PCODE: $00000DD0 VOL: 0
; 0000 00C5     if (sys_tmr==6)
;PCODE: $00000DD1 VOL: 0
;PCODE: $00000DD2 VOL: 0
;PCODE: $00000DD3 VOL: 0
; 0000 00C6     {
; 0000 00C7         sys_tmr=0;
;PCODE: $00000DD4 VOL: 0
; 0000 00C8         process_butt();
;PCODE: $00000DD5 VOL: 0
; 0000 00C9          process_sys();
;PCODE: $00000DD6 VOL: 0
; 0000 00CA     }
; 0000 00CB 
; 0000 00CC }
;PCODE: $00000DD7 VOL: 0
;PCODE: $00000DD8 VOL: 0
;PCODE: $00000DD9 VOL: 0
;PCODE: $00000DDA VOL: 0
;
;void process_butt(void)
; 0000 00CF {
;PCODE: $00000DDB VOL: 0
;PCODE: $00000DDC VOL: 0
; 0000 00D0 
; 0000 00D1     if (old_but_sold==1 && solder_but==0)
;PCODE: $00000DDD VOL: 0
;PCODE: $00000DDE VOL: 0
;PCODE: $00000DDF VOL: 0
;PCODE: $00000DE0 VOL: 0
;PCODE: $00000DE1 VOL: 0
;PCODE: $00000DE2 VOL: 0
;PCODE: $00000DE3 VOL: 0
;PCODE: $00000DE4 VOL: 0
;PCODE: $00000DE5 VOL: 0
;PCODE: $00000DE6 VOL: 0
; 0000 00D2     {
; 0000 00D3         solder_on=!solder_on;
;PCODE: $00000DE7 VOL: 0
;PCODE: $00000DE8 VOL: 0
;PCODE: $00000DE9 VOL: 0
; 0000 00D4         solde_led=solder_on;
;PCODE: $00000DEA VOL: 0
;PCODE: $00000DEB VOL: 0
;PCODE: $00000DEC VOL: 0
;PCODE: $00000DED VOL: 0
;PCODE: $00000DEE VOL: 0
;PCODE: $00000DEF VOL: 0
;PCODE: $00000DF0 VOL: 0
;PCODE: $00000DF1 VOL: 0
;PCODE: $00000DF2 VOL: 0
;PCODE: $00000DF3 VOL: 0
; 0000 00D5     }
; 0000 00D6     air_on=air_ger;
;PCODE: $00000DF4 VOL: 0
;PCODE: $00000DF5 VOL: 0
;PCODE: $00000DF6 VOL: 0
;PCODE: $00000DF7 VOL: 0
;PCODE: $00000DF8 VOL: 0
; 0000 00D7     old_but_sold=solder_but;
;PCODE: $00000DF9 VOL: 0
;PCODE: $00000DFA VOL: 0
;PCODE: $00000DFB VOL: 0
;PCODE: $00000DFC VOL: 0
; 0000 00D8 }
;PCODE: $00000DFD VOL: 0
;PCODE: $00000DFE VOL: 0
;void process_sys(void)
; 0000 00DA {
;PCODE: $00000DFF VOL: 0
;PCODE: $00000E00 VOL: 0
; 0000 00DB     if (solder_on==1)
;PCODE: $00000E01 VOL: 0
;PCODE: $00000E02 VOL: 0
;PCODE: $00000E03 VOL: 0
; 0000 00DC     {
; 0000 00DD //        if (solder_set-solder_cur>5) sold_power=60;
; 0000 00DE //        if (solder_set-solder_cur>10) sold_power=100;
; 0000 00DF //        if (solder_set-solder_cur>20) sold_power=160;
; 0000 00E0 //        if (solder_set-solder_cur>40) sold_power=200;
; 0000 00E1 //        if (solder_set<solder_cur) sold_power=0;
; 0000 00E2           solder_power = pid_Controller( solder_set,solder_cur, &pidData1);
;PCODE: $00000E04 VOL: 0
;PCODE: $00000E05 VOL: 0
;PCODE: $00000E06 VOL: 0
;PCODE: $00000E07 VOL: 0
;PCODE: $00000E08 VOL: 0
; 0000 00E3           if (solder_power>255) { solder_power=255; }
;PCODE: $00000E09 VOL: 0
;PCODE: $00000E0A VOL: 0
;PCODE: $00000E0B VOL: 0
;PCODE: $00000E0C VOL: 0
;PCODE: $00000E0D VOL: 0
; 0000 00E4           if (solder_power<0) {solder_power=0;  pid_Reset_Integrator(&pidData1);}
;PCODE: $00000E0E VOL: 0
;PCODE: $00000E0F VOL: 0
;PCODE: $00000E10 VOL: 0
;PCODE: $00000E11 VOL: 0
;PCODE: $00000E12 VOL: 0
;PCODE: $00000E13 VOL: 0
;PCODE: $00000E14 VOL: 0
;PCODE: $00000E15 VOL: 0
; 0000 00E5           sold_power=solder_power;
;PCODE: $00000E16 VOL: 0
;PCODE: $00000E17 VOL: 0
;PCODE: $00000E18 VOL: 0
; 0000 00E6     }
; 0000 00E7     else
;PCODE: $00000E19 VOL: 0
;PCODE: $00000E1A VOL: 0
; 0000 00E8     {
; 0000 00E9        sold_power=0;
;PCODE: $00000E1B VOL: 0
;PCODE: $00000E1C VOL: 0
; 0000 00EA        pid_Reset_Integrator(&pidData1);
;PCODE: $00000E1D VOL: 0
;PCODE: $00000E1E VOL: 0
; 0000 00EB     }
;PCODE: $00000E1F VOL: 0
; 0000 00EC 
; 0000 00ED 
; 0000 00EE 
; 0000 00EF     if (air_on==1)
;PCODE: $00000E20 VOL: 0
;PCODE: $00000E21 VOL: 0
;PCODE: $00000E22 VOL: 0
; 0000 00F0     {
; 0000 00F1         set_fan(fan_set);
;PCODE: $00000E23 VOL: 0
;PCODE: $00000E24 VOL: 0
; 0000 00F2         if (air_set>air_cur)
;PCODE: $00000E25 VOL: 0
;PCODE: $00000E26 VOL: 0
;PCODE: $00000E27 VOL: 0
; 0000 00F3         {
; 0000 00F4             air_heater=1;
;PCODE: $00000E28 VOL: 0
;PCODE: $00000E29 VOL: 0
; 0000 00F5         }
; 0000 00F6         else
;PCODE: $00000E2A VOL: 0
;PCODE: $00000E2B VOL: 0
; 0000 00F7         {
; 0000 00F8             air_heater=0;
;PCODE: $00000E2C VOL: 0
;PCODE: $00000E2D VOL: 0
; 0000 00F9         }
;PCODE: $00000E2E VOL: 0
; 0000 00FA     }
; 0000 00FB 
; 0000 00FC 
; 0000 00FD 
; 0000 00FE 
; 0000 00FF }
;PCODE: $00000E2F VOL: 0
;PCODE: $00000E30 VOL: 0
;PCODE: $00000E31 VOL: 0
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0105 {
;PCODE: $00000E32 VOL: 0
;PCODE: $00000E33 VOL: 0
; 0000 0106     ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000E34 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000E35 VOL: 0
;PCODE: $00000E36 VOL: 0
;PCODE: $00000E37 VOL: 0
; 0000 0107     // Delay needed for the stabilization of the ADC input voltage
; 0000 0108     delay_us(10);
;PCODE: $00000E38 VOL: 0
; 0000 0109     // Start the AD conversion
; 0000 010A     ADCSRA|=(1<<ADSC);
;PCODE: $00000E39 VOL: 0
;PCODE: $00000E3A VOL: 0
; 0000 010B     // Wait for the AD conversion to complete
; 0000 010C     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000E3B VOL: 0
;PCODE: $00000E3C VOL: 0
;PCODE: $00000E3D VOL: 0
;PCODE: $00000E3E VOL: 0
;PCODE: $00000E3F VOL: 0
;PCODE: $00000E40 VOL: 0
; 0000 010D     ADCSRA|=(1<<ADIF);
;PCODE: $00000E41 VOL: 0
;PCODE: $00000E42 VOL: 0
; 0000 010E     return ADCW;
;PCODE: $00000E43 VOL: 0
;PCODE: $00000E44 VOL: 0
;PCODE: $00000E45 VOL: 0
; 0000 010F }
;PCODE: $00000E46 VOL: 0
;
;
;void main(void)
; 0000 0113 {
;PCODE: $00000E47 VOL: 0
; 0000 0114 // Declare your local variables here
; 0000 0115 
; 0000 0116 // Input/Output Ports initialization
; 0000 0117 // Port B initialization
; 0000 0118 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 0119 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000E48 VOL: 0
;PCODE: $00000E49 VOL: 0
; 0000 011A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 011B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000E4A VOL: 0
;PCODE: $00000E4B VOL: 0
; 0000 011C 
; 0000 011D // Port C initialization
; 0000 011E // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 011F DDRC=(0<<DDC6) | (0<<DDC5) | (1<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000E4C VOL: 0
;PCODE: $00000E4D VOL: 0
; 0000 0120 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0121 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000E4E VOL: 0
;PCODE: $00000E4F VOL: 0
; 0000 0122 
; 0000 0123 // Port D initialization
; 0000 0124 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0000 0125 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000E50 VOL: 0
;PCODE: $00000E51 VOL: 0
; 0000 0126 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0127 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000E52 VOL: 0
;PCODE: $00000E53 VOL: 0
; 0000 0128 
; 0000 0129 // Timer/Counter 0 initialization
; 0000 012A // Clock source: System Clock
; 0000 012B // Clock value: 7,813 kHz
; 0000 012C TCCR0=(1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $00000E54 VOL: 0
;PCODE: $00000E55 VOL: 0
; 0000 012D TCNT0=0x00;
;PCODE: $00000E56 VOL: 0
;PCODE: $00000E57 VOL: 0
; 0000 012E 
; 0000 012F // Timer/Counter 1 initialization
; 0000 0130 // Clock source: System Clock
; 0000 0131 // Clock value: 7,813 kHz
; 0000 0132 // Mode: Fast PWM top=0x00FF
; 0000 0133 // OC1A output: Non-Inverted PWM
; 0000 0134 // OC1B output: Non-Inverted PWM
; 0000 0135 // Noise Canceler: Off
; 0000 0136 // Input Capture on Falling Edge
; 0000 0137 // Timer Period: 32,768 ms
; 0000 0138 // Output Pulse(s):
; 0000 0139 // OC1A Period: 32,768 ms Width: 0 us
; 0000 013A // OC1B Period: 32,768 ms Width: 0 us
; 0000 013B // Timer1 Overflow Interrupt: Off
; 0000 013C // Input Capture Interrupt: Off
; 0000 013D // Compare A Match Interrupt: Off
; 0000 013E // Compare B Match Interrupt: Off
; 0000 013F TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $00000E58 VOL: 0
;PCODE: $00000E59 VOL: 0
; 0000 0140 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000E5A VOL: 0
;PCODE: $00000E5B VOL: 0
; 0000 0141 TCNT1H=0x00;
;PCODE: $00000E5C VOL: 0
;PCODE: $00000E5D VOL: 0
; 0000 0142 TCNT1L=0x00;
;PCODE: $00000E5E VOL: 0
;PCODE: $00000E5F VOL: 0
; 0000 0143 ICR1H=0x00;
;PCODE: $00000E60 VOL: 0
;PCODE: $00000E61 VOL: 0
; 0000 0144 ICR1L=0x00;
;PCODE: $00000E62 VOL: 0
;PCODE: $00000E63 VOL: 0
; 0000 0145 
; 0000 0146 
; 0000 0147 
; 0000 0148 
; 0000 0149 
; 0000 014A 
; 0000 014B 
; 0000 014C 
; 0000 014D OCR1AH=0x00;
;PCODE: $00000E64 VOL: 0
;PCODE: $00000E65 VOL: 0
; 0000 014E OCR1AL=0x00;
;PCODE: $00000E66 VOL: 0
;PCODE: $00000E67 VOL: 0
; 0000 014F OCR1BH=0x00;
;PCODE: $00000E68 VOL: 0
;PCODE: $00000E69 VOL: 0
; 0000 0150 OCR1BL=0x00;
;PCODE: $00000E6A VOL: 0
;PCODE: $00000E6B VOL: 0
; 0000 0151 
; 0000 0152 // Timer/Counter 2 initialization
; 0000 0153 // Clock source: System Clock
; 0000 0154 // Clock value: Timer2 Stopped
; 0000 0155 // Mode: Normal top=0xFF
; 0000 0156 // OC2 output: Disconnected
; 0000 0157 ASSR=0<<AS2;
;PCODE: $00000E6C VOL: 0
;PCODE: $00000E6D VOL: 0
; 0000 0158 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000E6E VOL: 0
;PCODE: $00000E6F VOL: 0
; 0000 0159 TCNT2=0x00;
;PCODE: $00000E70 VOL: 0
;PCODE: $00000E71 VOL: 0
; 0000 015A OCR2=0x00;
;PCODE: $00000E72 VOL: 0
;PCODE: $00000E73 VOL: 0
; 0000 015B 
; 0000 015C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 015D TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
;PCODE: $00000E74 VOL: 0
;PCODE: $00000E75 VOL: 0
; 0000 015E 
; 0000 015F // External Interrupt(s) initialization
; 0000 0160 // INT0: Off
; 0000 0161 // INT1: Off
; 0000 0162 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000E76 VOL: 0
;PCODE: $00000E77 VOL: 0
; 0000 0163 
; 0000 0164 // USART initialization
; 0000 0165 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0166 // USART Receiver: Off
; 0000 0167 // USART Transmitter: On
; 0000 0168 // USART Mode: Asynchronous
; 0000 0169 // USART Baud Rate: 4800
; 0000 016A UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000E78 VOL: 0
;PCODE: $00000E79 VOL: 0
; 0000 016B UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000E7A VOL: 0
;PCODE: $00000E7B VOL: 0
; 0000 016C UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000E7C VOL: 0
;PCODE: $00000E7D VOL: 0
; 0000 016D UBRRH=0x00;
;PCODE: $00000E7E VOL: 0
;PCODE: $00000E7F VOL: 0
; 0000 016E UBRRL=0x0C;
;PCODE: $00000E80 VOL: 0
;PCODE: $00000E81 VOL: 0
; 0000 016F 
; 0000 0170 // Analog Comparator initialization
; 0000 0171 // Analog Comparator: Off
; 0000 0172 // The Analog Comparator's positive input is
; 0000 0173 // connected to the AIN0 pin
; 0000 0174 // The Analog Comparator's negative input is
; 0000 0175 // connected to the AIN1 pin
; 0000 0176 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000E82 VOL: 0
;PCODE: $00000E83 VOL: 0
; 0000 0177 
; 0000 0178 // ADC initialization
; 0000 0179 // ADC Clock frequency: 7,813 kHz
; 0000 017A // ADC Voltage Reference: AREF pin
; 0000 017B ADMUX=ADC_VREF_TYPE;
;PCODE: $00000E84 VOL: 0
;PCODE: $00000E85 VOL: 0
; 0000 017C ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000E86 VOL: 0
;PCODE: $00000E87 VOL: 0
; 0000 017D SFIOR=(0<<ACME);
;PCODE: $00000E88 VOL: 0
;PCODE: $00000E89 VOL: 0
; 0000 017E 
; 0000 017F // SPI initialization
; 0000 0180 // SPI disabled
; 0000 0181 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000E8A VOL: 0
;PCODE: $00000E8B VOL: 0
; 0000 0182 
; 0000 0183 // TWI initialization
; 0000 0184 // TWI disabled
; 0000 0185 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000E8C VOL: 0
;PCODE: $00000E8D VOL: 0
; 0000 0186 
; 0000 0187 // Global enable interrupts
; 0000 0188 fan_power=0;
;PCODE: $00000E8E VOL: 0
;PCODE: $00000E8F VOL: 0
; 0000 0189 
; 0000 018A LCD_init();
;PCODE: $00000E90 VOL: 0
; 0000 018B SetRotation(90);
;PCODE: $00000E91 VOL: 0
;PCODE: $00000E92 VOL: 0
;PCODE: $00000E93 VOL: 0
; 0000 018C LCD_Puts(" LNSOLDER ",0,50,WHITE,BLACK,3,3);
;PCODE: $00000E94 VOL: 0
;PCODE: $00000E95 VOL: 0
;PCODE: $00000E96 VOL: 0
;PCODE: $00000E97 VOL: 0
;PCODE: $00000E98 VOL: 0
;PCODE: $00000E99 VOL: 0
;PCODE: $00000E9A VOL: 0
;PCODE: $00000E9B VOL: 0
;PCODE: $00000E9C VOL: 0
;PCODE: $00000E9D VOL: 0
;PCODE: $00000E9E VOL: 0
;PCODE: $00000E9F VOL: 0
;PCODE: $00000EA0 VOL: 0
;PCODE: $00000EA1 VOL: 0
;PCODE: $00000EA2 VOL: 0
; 0000 018D delay_ms(1000);
;PCODE: $00000EA3 VOL: 0
;PCODE: $00000EA4 VOL: 0
; 0000 018E LCD_FillScreen(WHITE);
;PCODE: $00000EA5 VOL: 0
;PCODE: $00000EA6 VOL: 0
; 0000 018F 
; 0000 0190 draw_2bit_image (0,5,32,32,BLUE,WHITE,solder_img);
;PCODE: $00000EA7 VOL: 0
;PCODE: $00000EA8 VOL: 0
;PCODE: $00000EA9 VOL: 0
;PCODE: $00000EAA VOL: 0
;PCODE: $00000EAB VOL: 0
;PCODE: $00000EAC VOL: 0
;PCODE: $00000EAD VOL: 0
;PCODE: $00000EAE VOL: 0
;PCODE: $00000EAF VOL: 0
;PCODE: $00000EB0 VOL: 0
;PCODE: $00000EB1 VOL: 0
;PCODE: $00000EB2 VOL: 0
;PCODE: $00000EB3 VOL: 0
;PCODE: $00000EB4 VOL: 0
; 0000 0191 LCD_DrawLine(0,40,175,40,BLACK);
;PCODE: $00000EB5 VOL: 0
;PCODE: $00000EB6 VOL: 0
;PCODE: $00000EB7 VOL: 0
;PCODE: $00000EB8 VOL: 0
;PCODE: $00000EB9 VOL: 0
;PCODE: $00000EBA VOL: 0
;PCODE: $00000EBB VOL: 0
;PCODE: $00000EBC VOL: 0
;PCODE: $00000EBD VOL: 0
;PCODE: $00000EBE VOL: 0
;PCODE: $00000EBF VOL: 0
; 0000 0192 draw_2bit_image (0,45,32,32,BLUE,WHITE,hotair_img);
;PCODE: $00000EC0 VOL: 0
;PCODE: $00000EC1 VOL: 0
;PCODE: $00000EC2 VOL: 0
;PCODE: $00000EC3 VOL: 0
;PCODE: $00000EC4 VOL: 0
;PCODE: $00000EC5 VOL: 0
;PCODE: $00000EC6 VOL: 0
;PCODE: $00000EC7 VOL: 0
;PCODE: $00000EC8 VOL: 0
;PCODE: $00000EC9 VOL: 0
;PCODE: $00000ECA VOL: 0
;PCODE: $00000ECB VOL: 0
;PCODE: $00000ECC VOL: 0
;PCODE: $00000ECD VOL: 0
; 0000 0193 LCD_DrawLine(0,80,175,80,BLACK);
;PCODE: $00000ECE VOL: 0
;PCODE: $00000ECF VOL: 0
;PCODE: $00000ED0 VOL: 0
;PCODE: $00000ED1 VOL: 0
;PCODE: $00000ED2 VOL: 0
;PCODE: $00000ED3 VOL: 0
;PCODE: $00000ED4 VOL: 0
;PCODE: $00000ED5 VOL: 0
;PCODE: $00000ED6 VOL: 0
;PCODE: $00000ED7 VOL: 0
;PCODE: $00000ED8 VOL: 0
; 0000 0194 draw_2bit_image (2,85,32,32,BLUE,WHITE,fan_img);
;PCODE: $00000ED9 VOL: 0
;PCODE: $00000EDA VOL: 0
;PCODE: $00000EDB VOL: 0
;PCODE: $00000EDC VOL: 0
;PCODE: $00000EDD VOL: 0
;PCODE: $00000EDE VOL: 0
;PCODE: $00000EDF VOL: 0
;PCODE: $00000EE0 VOL: 0
;PCODE: $00000EE1 VOL: 0
;PCODE: $00000EE2 VOL: 0
;PCODE: $00000EE3 VOL: 0
;PCODE: $00000EE4 VOL: 0
;PCODE: $00000EE5 VOL: 0
;PCODE: $00000EE6 VOL: 0
; 0000 0195 LCD_DrawLine(0,120,175,120,BLACK);
;PCODE: $00000EE7 VOL: 0
;PCODE: $00000EE8 VOL: 0
;PCODE: $00000EE9 VOL: 0
;PCODE: $00000EEA VOL: 0
;PCODE: $00000EEB VOL: 0
;PCODE: $00000EEC VOL: 0
;PCODE: $00000EED VOL: 0
;PCODE: $00000EEE VOL: 0
;PCODE: $00000EEF VOL: 0
;PCODE: $00000EF0 VOL: 0
;PCODE: $00000EF1 VOL: 0
; 0000 0196 LCD_Puts("Powered by LnKOx & RadioVetal",0,123,SKY,WHITE,1,1);
;PCODE: $00000EF2 VOL: 0
;PCODE: $00000EF3 VOL: 0
;PCODE: $00000EF4 VOL: 0
;PCODE: $00000EF5 VOL: 0
;PCODE: $00000EF6 VOL: 0
;PCODE: $00000EF7 VOL: 0
;PCODE: $00000EF8 VOL: 0
;PCODE: $00000EF9 VOL: 0
;PCODE: $00000EFA VOL: 0
;PCODE: $00000EFB VOL: 0
;PCODE: $00000EFC VOL: 0
;PCODE: $00000EFD VOL: 0
;PCODE: $00000EFE VOL: 0
;PCODE: $00000EFF VOL: 0
;PCODE: $00000F00 VOL: 0
; 0000 0197 Init_pid();
;PCODE: $00000F01 VOL: 0
; 0000 0198 #asm("sei")
;PCODE: $00000F02 VOL: 0
	sei
;PCODE: $00000F03 VOL: 0
; 0000 0199 while (1)
;PCODE: $00000F04 VOL: 0
; 0000 019A 
; 0000 019B {
; 0000 019C       // Place your code here
; 0000 019D     get_all_input();
;PCODE: $00000F05 VOL: 0
; 0000 019E     if (solder_on==1)
;PCODE: $00000F06 VOL: 0
;PCODE: $00000F07 VOL: 0
;PCODE: $00000F08 VOL: 0
; 0000 019F     {
; 0000 01A0         set_sold_cur_temp(solder_set);
;PCODE: $00000F09 VOL: 0
;PCODE: $00000F0A VOL: 0
; 0000 01A1         //set_sold_temp(solder_cur);
; 0000 01A2         set_sold_temp(solder_cur);
;PCODE: $00000F0B VOL: 0
;PCODE: $00000F0C VOL: 0
; 0000 01A3         if (solder_power>3)
;PCODE: $00000F0D VOL: 0
;PCODE: $00000F0E VOL: 0
;PCODE: $00000F0F VOL: 0
; 0000 01A4         {
; 0000 01A5            LCD_Puts("HEAT",15,30,RED,WHITE,1,1);
;PCODE: $00000F10 VOL: 0
;PCODE: $00000F11 VOL: 0
;PCODE: $00000F12 VOL: 0
;PCODE: $00000F13 VOL: 0
;PCODE: $00000F14 VOL: 0
;PCODE: $00000F15 VOL: 0
;PCODE: $00000F16 VOL: 0
;PCODE: $00000F17 VOL: 0
;PCODE: $00000F18 VOL: 0
;PCODE: $00000F19 VOL: 0
;PCODE: $00000F1A VOL: 0
;PCODE: $00000F1B VOL: 0
;PCODE: $00000F1C VOL: 0
;PCODE: $00000F1D VOL: 0
;PCODE: $00000F1E VOL: 0
; 0000 01A6         }
; 0000 01A7         else
;PCODE: $00000F1F VOL: 0
;PCODE: $00000F20 VOL: 0
; 0000 01A8         {
; 0000 01A9             LCD_Puts("    ",15,30,RED,WHITE,1,1);
;PCODE: $00000F21 VOL: 0
;PCODE: $00000F22 VOL: 0
;PCODE: $00000F23 VOL: 0
;PCODE: $00000F24 VOL: 0
;PCODE: $00000F25 VOL: 0
;PCODE: $00000F26 VOL: 0
;PCODE: $00000F27 VOL: 0
;PCODE: $00000F28 VOL: 0
;PCODE: $00000F29 VOL: 0
;PCODE: $00000F2A VOL: 0
;PCODE: $00000F2B VOL: 0
;PCODE: $00000F2C VOL: 0
;PCODE: $00000F2D VOL: 0
;PCODE: $00000F2E VOL: 0
;PCODE: $00000F2F VOL: 0
; 0000 01AA         }
;PCODE: $00000F30 VOL: 0
; 0000 01AB     }
; 0000 01AC     else
;PCODE: $00000F31 VOL: 0
;PCODE: $00000F32 VOL: 0
; 0000 01AD     {
; 0000 01AE        LCD_Puts("OFF    ",50,10,BLACK,WHITE,3,3);
;PCODE: $00000F33 VOL: 0
;PCODE: $00000F34 VOL: 0
;PCODE: $00000F35 VOL: 0
;PCODE: $00000F36 VOL: 0
;PCODE: $00000F37 VOL: 0
;PCODE: $00000F38 VOL: 0
;PCODE: $00000F39 VOL: 0
;PCODE: $00000F3A VOL: 0
;PCODE: $00000F3B VOL: 0
;PCODE: $00000F3C VOL: 0
;PCODE: $00000F3D VOL: 0
;PCODE: $00000F3E VOL: 0
;PCODE: $00000F3F VOL: 0
;PCODE: $00000F40 VOL: 0
;PCODE: $00000F41 VOL: 0
; 0000 01AF        LCD_Puts("    ",15,30,RED,WHITE,1,1);
;PCODE: $00000F42 VOL: 0
;PCODE: $00000F43 VOL: 0
;PCODE: $00000F44 VOL: 0
;PCODE: $00000F45 VOL: 0
;PCODE: $00000F46 VOL: 0
;PCODE: $00000F47 VOL: 0
;PCODE: $00000F48 VOL: 0
;PCODE: $00000F49 VOL: 0
;PCODE: $00000F4A VOL: 0
;PCODE: $00000F4B VOL: 0
;PCODE: $00000F4C VOL: 0
;PCODE: $00000F4D VOL: 0
;PCODE: $00000F4E VOL: 0
;PCODE: $00000F4F VOL: 0
;PCODE: $00000F50 VOL: 0
; 0000 01B0     }
;PCODE: $00000F51 VOL: 0
; 0000 01B1 
; 0000 01B2     if (air_on==1)
;PCODE: $00000F52 VOL: 0
;PCODE: $00000F53 VOL: 0
;PCODE: $00000F54 VOL: 0
; 0000 01B3     {
; 0000 01B4         set_air_cur_temp(air_set);
;PCODE: $00000F55 VOL: 0
;PCODE: $00000F56 VOL: 0
; 0000 01B5         set_air_temp(air_cur);
;PCODE: $00000F57 VOL: 0
;PCODE: $00000F58 VOL: 0
; 0000 01B6         if (air_set>air_cur)
;PCODE: $00000F59 VOL: 0
;PCODE: $00000F5A VOL: 0
;PCODE: $00000F5B VOL: 0
; 0000 01B7         {
; 0000 01B8             LCD_Puts("HEAT",15,70,RED,WHITE,1,1);
;PCODE: $00000F5C VOL: 0
;PCODE: $00000F5D VOL: 0
;PCODE: $00000F5E VOL: 0
;PCODE: $00000F5F VOL: 0
;PCODE: $00000F60 VOL: 0
;PCODE: $00000F61 VOL: 0
;PCODE: $00000F62 VOL: 0
;PCODE: $00000F63 VOL: 0
;PCODE: $00000F64 VOL: 0
;PCODE: $00000F65 VOL: 0
;PCODE: $00000F66 VOL: 0
;PCODE: $00000F67 VOL: 0
;PCODE: $00000F68 VOL: 0
;PCODE: $00000F69 VOL: 0
;PCODE: $00000F6A VOL: 0
; 0000 01B9         }
; 0000 01BA         else
;PCODE: $00000F6B VOL: 0
;PCODE: $00000F6C VOL: 0
; 0000 01BB         {
; 0000 01BC             LCD_Puts("    ",15,70,RED,WHITE,1,1);
;PCODE: $00000F6D VOL: 0
;PCODE: $00000F6E VOL: 0
;PCODE: $00000F6F VOL: 0
;PCODE: $00000F70 VOL: 0
;PCODE: $00000F71 VOL: 0
;PCODE: $00000F72 VOL: 0
;PCODE: $00000F73 VOL: 0
;PCODE: $00000F74 VOL: 0
;PCODE: $00000F75 VOL: 0
;PCODE: $00000F76 VOL: 0
;PCODE: $00000F77 VOL: 0
;PCODE: $00000F78 VOL: 0
;PCODE: $00000F79 VOL: 0
;PCODE: $00000F7A VOL: 0
;PCODE: $00000F7B VOL: 0
; 0000 01BD         }
;PCODE: $00000F7C VOL: 0
; 0000 01BE     }
; 0000 01BF     else
;PCODE: $00000F7D VOL: 0
;PCODE: $00000F7E VOL: 0
; 0000 01C0     {
; 0000 01C1         LCD_Puts("    ",15,70,RED,WHITE,1,1);
;PCODE: $00000F7F VOL: 0
;PCODE: $00000F80 VOL: 0
;PCODE: $00000F81 VOL: 0
;PCODE: $00000F82 VOL: 0
;PCODE: $00000F83 VOL: 0
;PCODE: $00000F84 VOL: 0
;PCODE: $00000F85 VOL: 0
;PCODE: $00000F86 VOL: 0
;PCODE: $00000F87 VOL: 0
;PCODE: $00000F88 VOL: 0
;PCODE: $00000F89 VOL: 0
;PCODE: $00000F8A VOL: 0
;PCODE: $00000F8B VOL: 0
;PCODE: $00000F8C VOL: 0
;PCODE: $00000F8D VOL: 0
; 0000 01C2         if (air_cur>100)
;PCODE: $00000F8E VOL: 0
;PCODE: $00000F8F VOL: 0
;PCODE: $00000F90 VOL: 0
; 0000 01C3         {
; 0000 01C4             set_fan(100);
;PCODE: $00000F91 VOL: 0
;PCODE: $00000F92 VOL: 0
;PCODE: $00000F93 VOL: 0
; 0000 01C5         }
; 0000 01C6         else
;PCODE: $00000F94 VOL: 0
;PCODE: $00000F95 VOL: 0
; 0000 01C7         {
; 0000 01C8             set_fan(0);
;PCODE: $00000F96 VOL: 0
;PCODE: $00000F97 VOL: 0
;PCODE: $00000F98 VOL: 0
; 0000 01C9         }
;PCODE: $00000F99 VOL: 0
; 0000 01CA 
; 0000 01CB        LCD_Puts("OFF    ",50,50,BLACK,WHITE,3,3);
;PCODE: $00000F9A VOL: 0
;PCODE: $00000F9B VOL: 0
;PCODE: $00000F9C VOL: 0
;PCODE: $00000F9D VOL: 0
;PCODE: $00000F9E VOL: 0
;PCODE: $00000F9F VOL: 0
;PCODE: $00000FA0 VOL: 0
;PCODE: $00000FA1 VOL: 0
;PCODE: $00000FA2 VOL: 0
;PCODE: $00000FA3 VOL: 0
;PCODE: $00000FA4 VOL: 0
;PCODE: $00000FA5 VOL: 0
;PCODE: $00000FA6 VOL: 0
;PCODE: $00000FA7 VOL: 0
;PCODE: $00000FA8 VOL: 0
; 0000 01CC        LCD_Puts("    ",15,70,RED,WHITE,1,1);
;PCODE: $00000FA9 VOL: 0
;PCODE: $00000FAA VOL: 0
;PCODE: $00000FAB VOL: 0
;PCODE: $00000FAC VOL: 0
;PCODE: $00000FAD VOL: 0
;PCODE: $00000FAE VOL: 0
;PCODE: $00000FAF VOL: 0
;PCODE: $00000FB0 VOL: 0
;PCODE: $00000FB1 VOL: 0
;PCODE: $00000FB2 VOL: 0
;PCODE: $00000FB3 VOL: 0
;PCODE: $00000FB4 VOL: 0
;PCODE: $00000FB5 VOL: 0
;PCODE: $00000FB6 VOL: 0
;PCODE: $00000FB7 VOL: 0
; 0000 01CD     }
;PCODE: $00000FB8 VOL: 0
; 0000 01CE 
; 0000 01CF 
; 0000 01D0 
; 0000 01D1 }
;PCODE: $00000FB9 VOL: 0
;PCODE: $00000FBA VOL: 0
; 0000 01D2 }
;PCODE: $00000FBB VOL: 0
;PCODE: $00000FBC VOL: 0
;PCODE: $00000FBD VOL: 0

	.DSEG
_0x190:
	.BYTE 0x5C
;
;//solder_but
;// air_but
;// air_ger
