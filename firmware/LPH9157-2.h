//********************Библиотека дисплея Siemens C75, МЕ75*******************
//           	  	Зеленый текстолит LPH9157-2
//             		     132х176 пикселей
//                   		  v 1.1
//                  Copyright (c) Кизим Игорь aka Igoryosha
//			  Website : lobotryasy.net 
//***************************************************************************
// v 1.1:	- Реализована возможность с помощью макроса _USE_SOFT_SPI выбрать аппаратный или программный SPI;
//          - добавлена функция void SetRotation (unsigned int angle), где angle - угол поворота экрана (0, 90, 180 и 270 градусов), по умолчанию - 0
//  		- добавлена функция void LCD_FillLine (char tx1, char ty1, char tx2, char ty2, char width, int color) 
//	    	  для рисования линии шириной width;
//		    - добавлена функция void LCD_Put_Graph (char percent, char x, char y, int t_color, int b_color, char width, char zoom_height, int rot)
//		      для создания индикатора типа бегающая полоска (прыгающий столбик)


#ifndef	LPH9157-2_h
#define	LPH9157-2_h

#pragma used+

//#define _8_BIT_COLOR  //Если закомментировано - 16-ти битный цвет
#define _USE_SOFT_SPI	//Если закомментировано - аппаратный SPI
#define _GEOMETRICAL  //Использование функций вывода геометрических фигур

unsigned int rot=0; // угол поворота экрана (0, 90, 180, 270)

//===============================================================
//		            Назначение выводов порта 
//===============================================================
#define LCD_PORT 	PORTD 
#define LCD_DDR 	DDRD

#define LCD_CS      5   //Выбор чипа
#define LCD_RESET   3   //Сброс
#define LCD_RS      4   //CD - тип передаваемых данных
#define LCD_CLK     6   //Синхронизация
#define LCD_DATA    7   //Данные

#define   SetBit(reg, bit)          reg |= (1<<bit)            
#define   ClearBit(reg, bit)       reg &= (~(1<<bit))

#define Init_Port()   LCD_DDR|=(1<<LCD_CS)|(1<<LCD_RESET)|(1<<LCD_RS)|(1<<LCD_CLK)|(1<<LCD_DATA)

//===============================================================
//     			    Определение цветов
//===============================================================
#ifdef _8_BIT_COLOR
//8-ми битовая цветовая палитра (256 цветов)
#define GREEN       0x1C
#define DARK_GREEN  0x15
#define RED         0xE0
#define BLUE        0x1F    
#define DARK_BLUE   0x03
#define YELLOW      0xFC
#define ORANGE      0xEC
#define VIOLET      0xE3
#define WHITE       0xFF
#define BLACK       0x00
#define GREY        0x6D

#else   //_8_BIT_COLOR
//16-ти битовая цветовая палитра (65536 цветов)
#define    BLACK                0x0000 
#define    WHITE                0xFFFF 
#define    GRAY                 0xE79C
#define    GREEN                0x07E0 
#define    BLUE                 0x001F 
#define    RED                  0xF800 
#define    SKY                  0x5d1c 
#define    YELLOW               0xffe0 
#define    MAGENTA              0xf81f
#define    CYAN                 0x07ff
#define    ORANGE               0xfca0 
#define    PINK                 0xF97F
#define    BROWN                0x8200
#define    VIOLET               0x9199
#define    SILVER               0xa510
#define    GOLD                 0xa508
#define    BEGH                 0xf77b
#define    NAVY                 0x000F      
#define    DARK_GREEN           0x03E0      
#define    DARK_CYAN            0x03EF      
#define    MAROON               0x7800      
#define    PURPLE               0x780F      
#define    OLIVE                0x7BE0      
#define    LIGHT_GREY           0xC618      
#define    DARK_GREY            0x7BEF
#endif  //_8_BIT_COLOR

//*************************************************************
//			        ПРОТОТИПЫ ФУНКЦИЙ
//*************************************************************
void Send_spi(unsigned char data);
void Send_to_lcd (unsigned char RS, unsigned char data);

/*==============================================================================================================================
 Инициализация дисплея
==============================================================================================================================*/
void LCD_init (void);

/*==============================================================================================================================
 Задание угла поворота экрана
==============================================================================================================================*/
void SetRotation (unsigned int angle);

/*==============================================================================================================================
 Рабочая функция выделения области экрана
==============================================================================================================================*/
void SetArea (char x1, char x2, char y1, char y2);

/*==============================================================================================================================
 Функция вывода точки (пикселя).
 x и y – координаты экрана, где будет отображён пиксель цветом color
==============================================================================================================================*/
void Put_Pixel (char x, char y, unsigned int color);

/*==============================================================================================================================
 Рабочая функция для LCD_Putchar
==============================================================================================================================*/
void Send_Symbol (unsigned char symbol, char x, char y, int t_color, int b_color, char zoom_width, char zoom_height);

/*==============================================================================================================================
 Функция вывода одного символа ASCII-кода. Данная функция рассчитана на вывод символов размером 5х8 пикселей 
 symbol – выводимый на экран символ в ASCII-кодировке; x и y – начальная координата вывода символа; t_color – цвет пикселя; 
 b_color – цвет фона; переменные zoom_width и zoom_height увеличивают символ на экране в указанное число раз.
==============================================================================================================================*/  
void LCD_Putchar (char symbol, char x, char y, int t_color, int b_color, char zoom_width, char zoom_height);

/*==============================================================================================================================
 Функция вывода строки, расположенной в ram-памяти микроконтроллера. x и y - координаты пикселя начала вывода строки
==============================================================================================================================*/    
void LCD_Puts(char *str, int x, int y, int t_color, int b_color, char zoom_width, char zoom_height);

/*==============================================================================================================================
 Функция вывода строки, расположенной во flash-памяти микроконтроллера
==============================================================================================================================*/
void LCD_Putsf(flash char *str, int x, int y, int t_color, int b_color, char zoom_width, char zoom_height);

/*==============================================================================================================================
 Рабочая функция вывода для LCD_Putchar_Shadow
==============================================================================================================================*/
void Send_Symbol_Shadow (unsigned char symbol, char x, char y, int t_color, char zoom_width, char zoom_height); 

/*==============================================================================================================================
 То же, что и LCD_Putchar, только без цвета фона
==============================================================================================================================*/  
void LCD_Putchar_Shadow (char symbol, char x, char y, int t_color, char zoom_width, char zoom_height);

/*==============================================================================================================================
 То же, что и LCD_Puts, только без цвета фона
==============================================================================================================================*/
void LCD_Puts_Shadow (char *str, int x, int y,  int t_color, char zoom_width, char zoom_height);

/*==============================================================================================================================
 То же, что и LCD_Putsf, только без цвета фона
==============================================================================================================================*/
void LCD_Putsf_Shadow (flash char *str, int x, int y,  int t_color, char zoom_width, char zoom_height);

/*==============================================================================================================================
 Функция заливки экрана цветом color
==============================================================================================================================*/ 
void LCD_FillScreen (unsigned int color);

/*==============================================================================================================================
 Функция вывода картинки. x и y начальная позиция выводимого на экран изображения; width и height – ширина и высота 
 изображения (в пикселях);  *img – указатель на массив данных, составляющих изображение. Данная функция предполагает, 
 что массив данных изображения расположен во flash-памяти микроконтроллера. Для преобразования необходимого вам изображения в 
 массив, содержащий цвет пикселей, можно воспользоваться программами Image2Lcd или Nokia Image Creator, которые несложно найти 
 на просторах интернета. Единственное требование – направление вывода массива изображения должно выполняться слева-направо,
 сверху-вниз! При использовании 16-ти битной палитры, при преобразовании изображения в массив типа char, обязательно старший
 байт должен идти первым!
==============================================================================================================================*/
void LCD_Output_image (char x, char y, char width, char height, flash char *img);




/*==============================================================================================================================
 Рабочая функция для LCD_Output_image
==============================================================================================================================*/
void Send_Image (char x, char y, char width, char height, flash char *img);

#ifdef _GEOMETRICAL

/*==============================================================================================================================
 Нарисовать линию. x1 и y1 – начальная позиция линии; x2 и y2 – конечная позиция линии
==============================================================================================================================*/
void LCD_DrawLine (char x1, char y1, char x2, char y2, int color);

/*==============================================================================================================================
 Нарисовать линию шириной width 
==============================================================================================================================*/
void LCD_FillLine (char tx1, char ty1, char tx2, char ty2, char width, int color);

/*==============================================================================================================================
 Нарисовать рамку. size - толщина рамки
==============================================================================================================================*/
void LCD_DrawRect (char x1, char y1, char width, char height, char size, int color);

/*==============================================================================================================================
 Нарисовать прямоугольник
==============================================================================================================================*/
void LCD_FillRect (char x1, char y1, char width, char height, int color);

/*==============================================================================================================================
 Нарисовать окружность. rad – радиус окружности в пикселях
==============================================================================================================================*/
void LCD_DrawCircle (char xcenter, char ycenter, char rad, int color);

/*==============================================================================================================================
 Нарисовать круг, заполненный цветом color
==============================================================================================================================*/
void LCD_FillCircle (char xcenter, char ycenter, char rad, int color);

/*==============================================================================================================================
 Нарисовать контуры треугольника
==============================================================================================================================*/
void LCD_DrawTriangle (char x1, char y1, char x2, char y2, char x3, char y3, int color);

/*==============================================================================================================================
 Нарисовать треугольник, заполненный цветом color
==============================================================================================================================*/
void LCD_FillTriangle (char x1, char y1, char x2, char y2, char x3, char y3, int color);

/*==============================================================================================================================
 Рабочая функция для LCD_FillTriangle
==============================================================================================================================*/
void LCD_FillTriangleA (char x1, char y1, char x2, char y2, char x3, char y3, int color);

/*==============================================================================================================================
 Нарисовать индикатор типа бегающая полоска (прыгающий столбик)
==============================================================================================================================*/
void LCD_Put_Graph (char percent, char x, char y, int t_color, int b_color, char width, char zoom_height);

#endif

#pragma used-
#include "LPH9157-2.c"

#endif
